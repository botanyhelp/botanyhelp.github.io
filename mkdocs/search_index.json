{
    "docs": [
        {
            "location": "/", 
            "text": "Thomas Maher\n\n\nPitt fan, New Alexandria, PA, long ago.\n\n\n\n\nThese pages discuss lots of software I've written that can be found on my github page at \nhttps://github.com/botanyhelp/\n  Codes are mixed in suggestions for how to learn specific technologies.  These opinions are mine and you can ignore all of them.  \n\n\nMany of these things can be found out there including in these places:\n\n\nWeb apps running on Google App Engine\n\n\nhttp://fixamfm.appspot.com/\n\n\nhttp://fixwdc.appspot.com/\n\n\nhttp://wisconsinherbarium.appspot.com/\n\n\nRuby on Rails apps running on Heroku\n\n\nCaution: Heroku can take a minute to warm up:\n\n\nhttps://aqueous-bayou-3129.herokuapp.com/carriers/\n\n\nLinux Apache Mysql Perl\n\n\nWisconsin Herbarium\n\n\nJavascript (and Offline) Web App\n\n\nKeeps working (even after your internet connection stops working):\n\n\nAgemaker\n\n\niPhone Apps\n\n\nDeadtapes\n\n\nAndroid Apps\n\n\nAgemaker\n\n\nAircraftcarriers\n\n\nCivilwargenerals\n\n\nDeadlyrics\n\n\nDeadquotes\n\n\nDeadshowfinder\n\n\nDisastersworldwide\n\n\nFemaleastronauts\n\n\nFighterjets\n\n\nFixwdc\n\n\nLaotzutaotehking\n\n\nNuclide\n\n\nRecordlabels\n\n\nScottishwhiskydistilleries\n\n\nShuttleflights\n\n\nUfosightings", 
            "title": "Home"
        }, 
        {
            "location": "/#thomas-maher", 
            "text": "Pitt fan, New Alexandria, PA, long ago.   These pages discuss lots of software I've written that can be found on my github page at  https://github.com/botanyhelp/   Codes are mixed in suggestions for how to learn specific technologies.  These opinions are mine and you can ignore all of them.    Many of these things can be found out there including in these places:  Web apps running on Google App Engine  http://fixamfm.appspot.com/  http://fixwdc.appspot.com/  http://wisconsinherbarium.appspot.com/  Ruby on Rails apps running on Heroku  Caution: Heroku can take a minute to warm up:  https://aqueous-bayou-3129.herokuapp.com/carriers/  Linux Apache Mysql Perl  Wisconsin Herbarium  Javascript (and Offline) Web App  Keeps working (even after your internet connection stops working):  Agemaker  iPhone Apps  Deadtapes  Android Apps  Agemaker  Aircraftcarriers  Civilwargenerals  Deadlyrics  Deadquotes  Deadshowfinder  Disastersworldwide  Femaleastronauts  Fighterjets  Fixwdc  Laotzutaotehking  Nuclide  Recordlabels  Scottishwhiskydistilleries  Shuttleflights  Ufosightings", 
            "title": "Thomas Maher"
        }, 
        {
            "location": "/linux/clustering/", 
            "text": "Clustering\n\n\nBuilding a cluster (in order of best to worst options):\n\n\n\n\nYou don't need a linux cluster.  Maybe you only need lots of storage.  Maybe you only need high availability.\n\n\nUse the one you already have at work or school. \n\n\nBuy one from \nAdvanced Clustering Technologies\n.  You will still need at least a minimal linux administrator but ACT has great hardware at a great price and delivers great support. \n\n\nSetup a Rocks cluster with existing PC machinery with \nRocks\n.  You will need a medium tier linux administrator but this is a great cluster kit and will come with all of the bells and whistles.  Using Rocks lets them do alot of the work for you.  The main benefit of Rocks is the \neasy\n thing.\n\n\nSetup a custom cluster using PC hardware and a switch.  You will need a good linux administrator.  If you insist on certain attributes (must run Suse, must have lustre, must must must), you might need to build it yourself.  Good linux administrators might prefer the custom built route. \n\n\nSetup a cluster on Google Compute.  These are (circa Spring 2016) not clusterable except at a very long distance.  Each VM is roughly unrelated to other VMs that you start.  Potentially high costs in terms of administrative skills and experience.  Google Compute is nice because its out there on the cloud and is Google's problem.  The performance, flexibility and future is very bright with Google Compute.  \n\n\nSetup a cluster on Amazon.  This option is very attractive if you have an AWS expert on hand that won't be leaving soon.  With AWS expertise, extremely flexible clustering and extremely competitive pricing is yours.  You can turn on 900 CPUs for two days, use it, turn it off.  That means you have a giant cluster and you only paid a hundred bucks.  By design, AWS setup is \nroughly\n self documenting.  Therefore, you get your cluster documented as you build it.  This is the best clustering option available but, because of the rarity of competent AWS administration, you should forget it. \n\n\n\n\nBenchmarking\n\n\nThe stuff you already have on your machine are the best tools: top, htop, iotop, bonnie, pv, dd, time, ganglia, nagios, df, dmesg, iostat, \n\n\nSee \nOpenMP programming, compilation, execution, benchmarking in C++ on linux\n for a benchmarking example you can try yourself.", 
            "title": "Clustering"
        }, 
        {
            "location": "/linux/clustering/#clustering", 
            "text": "", 
            "title": "Clustering"
        }, 
        {
            "location": "/linux/clustering/#building-a-cluster-in-order-of-best-to-worst-options", 
            "text": "You don't need a linux cluster.  Maybe you only need lots of storage.  Maybe you only need high availability.  Use the one you already have at work or school.   Buy one from  Advanced Clustering Technologies .  You will still need at least a minimal linux administrator but ACT has great hardware at a great price and delivers great support.   Setup a Rocks cluster with existing PC machinery with  Rocks .  You will need a medium tier linux administrator but this is a great cluster kit and will come with all of the bells and whistles.  Using Rocks lets them do alot of the work for you.  The main benefit of Rocks is the  easy  thing.  Setup a custom cluster using PC hardware and a switch.  You will need a good linux administrator.  If you insist on certain attributes (must run Suse, must have lustre, must must must), you might need to build it yourself.  Good linux administrators might prefer the custom built route.   Setup a cluster on Google Compute.  These are (circa Spring 2016) not clusterable except at a very long distance.  Each VM is roughly unrelated to other VMs that you start.  Potentially high costs in terms of administrative skills and experience.  Google Compute is nice because its out there on the cloud and is Google's problem.  The performance, flexibility and future is very bright with Google Compute.    Setup a cluster on Amazon.  This option is very attractive if you have an AWS expert on hand that won't be leaving soon.  With AWS expertise, extremely flexible clustering and extremely competitive pricing is yours.  You can turn on 900 CPUs for two days, use it, turn it off.  That means you have a giant cluster and you only paid a hundred bucks.  By design, AWS setup is  roughly  self documenting.  Therefore, you get your cluster documented as you build it.  This is the best clustering option available but, because of the rarity of competent AWS administration, you should forget it.", 
            "title": "Building a cluster (in order of best to worst options):"
        }, 
        {
            "location": "/linux/clustering/#benchmarking", 
            "text": "The stuff you already have on your machine are the best tools: top, htop, iotop, bonnie, pv, dd, time, ganglia, nagios, df, dmesg, iostat,   See  OpenMP programming, compilation, execution, benchmarking in C++ on linux  for a benchmarking example you can try yourself.", 
            "title": "Benchmarking"
        }, 
        {
            "location": "/linux/amazon/", 
            "text": "Amazon\n\n\nRunning linux servers at Amazon is the best option.  Using amazon can only be done by people that have made an investment in the AWS way of administration.  AWS skills and experience take time to acquire and sit on top of existing knowledge about linux, networking and storage.  Losing your only AWS administrator would be a \nbad\n thing.  Starting with AWS can begin right now and is inexpensive to try.  Start now with several willing administrators that have experience with linux, storage and TCP/IP network administration.  Migrate each of your things (DHCP, NFS, web, database, DNS, applications) to AWS and get them running alongside your existing infrastructure.  After a year or so, your team will see that you can do it all on AWS, that you can lose a team member, that your performance is better, things are cheaper, systems are more understood and better documented.  You'll have what you had before but now you'll have time to do something more (like sleep easy).", 
            "title": "Amazon"
        }, 
        {
            "location": "/linux/amazon/#amazon", 
            "text": "Running linux servers at Amazon is the best option.  Using amazon can only be done by people that have made an investment in the AWS way of administration.  AWS skills and experience take time to acquire and sit on top of existing knowledge about linux, networking and storage.  Losing your only AWS administrator would be a  bad  thing.  Starting with AWS can begin right now and is inexpensive to try.  Start now with several willing administrators that have experience with linux, storage and TCP/IP network administration.  Migrate each of your things (DHCP, NFS, web, database, DNS, applications) to AWS and get them running alongside your existing infrastructure.  After a year or so, your team will see that you can do it all on AWS, that you can lose a team member, that your performance is better, things are cheaper, systems are more understood and better documented.  You'll have what you had before but now you'll have time to do something more (like sleep easy).", 
            "title": "Amazon"
        }, 
        {
            "location": "/linux/heroku/", 
            "text": "Heroku\n\n\nRuby, Rails and Heroku are steep climbs.  They are wonders of elegance and efficiency.  Ruby and rails are in a category with python, linux, git and others among the best software ever created. \n\n\nCarriers\n: Ruby on Rails web application with Postgres database backend running on \nheroku\n.\n\n\nThis application is deployable on a local machine using the Rails Webrick http server and a local Postgres database.  The code has the entire application but does not have anything to do with the Postgres database server that it expects is running locally and allowing local connections.  The code does have the capacity to load all of the initial records into the database.  Setting up a local linux postgres database to support this Rails application is described on the \nPostgres\n page. \n\n\nThe code is also ready to be deployed to Heroku.  This application was deployed on Heroku in October 2014 and is running there now at \n(be patient for the five second dymo startup)\n:\n\n\nhttps://aqueous-bayou-3129.herokuapp.com/carriers/\n\n\nAll of the code are open source GPLv3 and on github at:\n\n\nhttps://github.com/botanyhelp/Herokucarriers\n\n\n..all of the data in the application are thankfully provided by wikipedia editors and shared under this license.\n\n\nhttps://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License\n\n\nhttps://creativecommons.org/licenses/by-sa/3.0/us/\n\n\nSee also the \nruby\n and \npostgres\n pages.", 
            "title": "Heroku"
        }, 
        {
            "location": "/linux/heroku/#heroku", 
            "text": "Ruby, Rails and Heroku are steep climbs.  They are wonders of elegance and efficiency.  Ruby and rails are in a category with python, linux, git and others among the best software ever created.", 
            "title": "Heroku"
        }, 
        {
            "location": "/linux/heroku/#carriers-ruby-on-rails-web-application-with-postgres-database-backend-running-on-heroku", 
            "text": "This application is deployable on a local machine using the Rails Webrick http server and a local Postgres database.  The code has the entire application but does not have anything to do with the Postgres database server that it expects is running locally and allowing local connections.  The code does have the capacity to load all of the initial records into the database.  Setting up a local linux postgres database to support this Rails application is described on the  Postgres  page.   The code is also ready to be deployed to Heroku.  This application was deployed on Heroku in October 2014 and is running there now at  (be patient for the five second dymo startup) :  https://aqueous-bayou-3129.herokuapp.com/carriers/  All of the code are open source GPLv3 and on github at:  https://github.com/botanyhelp/Herokucarriers  ..all of the data in the application are thankfully provided by wikipedia editors and shared under this license.  https://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License  https://creativecommons.org/licenses/by-sa/3.0/us/  See also the  ruby  and  postgres  pages.", 
            "title": "Carriers: Ruby on Rails web application with Postgres database backend running on heroku."
        }, 
        {
            "location": "/linux/gae/", 
            "text": "Google App Engine\n\n\nGoogle App Engine is much like Ruby on Rails in these ways:\n\n\n\n\nGAE is hard to get started but really easy once you learn. \n\n\nGAE applications can be simple with few lines of code and favor convention over configuration. \n\n\nGAE applications can be indestructably scaled up. \n\n\n\n\nOnly GAE has the \ngoogle_data_store\n\n\nPython web application \nWisconsin Herbarium\n\n\n..deployed and running on Google App Engine infrastructure at:\n\n\nhttp://wisconsinherbarium.appspot.com/\n\n\n..all of the code is open source and available at:\n\n\nhttps://github.com/botanyhelp/Herbpythonappengine\n\n\nThe application allows visitors to search and view data and images found in the Wisconsin Herbarium.\n\n\nPython web application \nFix AM FM\n\n\n..deployed and running on Google App Engine infrastructure at:\n\n\nhttp://fixamfm.appspot.com/\n\n\n..all of the code is open source and available at:\n\n\nhttps://github.com/botanyhelp/fixamfm\n\n\nThe application allows visitors create song requests to any/every radio station in America.  There is a modest \"captcha\" system to fend off robots.  \n\n\nPython web application \nFixwdc\n\n\n..deployed and running on Google App Engine infrastructure at:\n\n\nhttp://fixwdc.appspot.com/\n\n\nThe application allows visitors to send letters to the representative of every congressional district in America.  There is a modest \"captcha\" system to fend off robots.  There is also a complex automated censorship process on the server that aspires to delete offensive communications.  Because login is not required, users can try to send nasty letters anonymously.  Humans are generally required for censorship but humans are expensive.  Therefore, this application does its best to delete offensive communications.  The censorship system uses many techniques and sources including this list of \nbad words\n generously shared by Big Lou.  The censorship is fallible.  It is possible to get nasty letters through and it is very likely that a nice letter will get some censoring.  The \nFixwdc\n android application communicates with this application.  Fixing Washington and nasty letters are two ambitious goals of this code.", 
            "title": "Google App Engine"
        }, 
        {
            "location": "/linux/gae/#google-app-engine", 
            "text": "Google App Engine is much like Ruby on Rails in these ways:   GAE is hard to get started but really easy once you learn.   GAE applications can be simple with few lines of code and favor convention over configuration.   GAE applications can be indestructably scaled up.    Only GAE has the  google_data_store", 
            "title": "Google App Engine"
        }, 
        {
            "location": "/linux/gae/#python-web-application-wisconsin-herbarium", 
            "text": "..deployed and running on Google App Engine infrastructure at:  http://wisconsinherbarium.appspot.com/  ..all of the code is open source and available at:  https://github.com/botanyhelp/Herbpythonappengine  The application allows visitors to search and view data and images found in the Wisconsin Herbarium.", 
            "title": "Python web application Wisconsin Herbarium"
        }, 
        {
            "location": "/linux/gae/#python-web-application-fix-am-fm", 
            "text": "..deployed and running on Google App Engine infrastructure at:  http://fixamfm.appspot.com/  ..all of the code is open source and available at:  https://github.com/botanyhelp/fixamfm  The application allows visitors create song requests to any/every radio station in America.  There is a modest \"captcha\" system to fend off robots.", 
            "title": "Python web application Fix AM FM"
        }, 
        {
            "location": "/linux/gae/#python-web-application-fixwdc", 
            "text": "..deployed and running on Google App Engine infrastructure at:  http://fixwdc.appspot.com/  The application allows visitors to send letters to the representative of every congressional district in America.  There is a modest \"captcha\" system to fend off robots.  There is also a complex automated censorship process on the server that aspires to delete offensive communications.  Because login is not required, users can try to send nasty letters anonymously.  Humans are generally required for censorship but humans are expensive.  Therefore, this application does its best to delete offensive communications.  The censorship system uses many techniques and sources including this list of  bad words  generously shared by Big Lou.  The censorship is fallible.  It is possible to get nasty letters through and it is very likely that a nice letter will get some censoring.  The  Fixwdc  android application communicates with this application.  Fixing Washington and nasty letters are two ambitious goals of this code.", 
            "title": "Python web application Fixwdc"
        }, 
        {
            "location": "/software/android/", 
            "text": "Android\n\n\nLearning android programming means learning java programming first.  New programmers cannot do better than Head First Java by Kathy Sierra, Bert Bates.  The very best (and very difficult) book on Java is The Java Programming Language by Arnold, Gosling and Holmes.  Bruce Eckel's Thinking in Java 4th edition provides very efficient learning.  Learning to program in Java is a steep climb that takes years before comfort sets in.  \n\n\nAlmost all of the apps on this page are available on the Google Play Store.  About half were written in Eclipse and half in Android Studio.  Many of them have a read only embedded database, usually sqlite, with great data.  All of them run on almost every android phone.  Almost every one reports zero crashes.  Most of these apps were written in a few days with simple coding and standard patterns.  Most of them have data shared under this license: \n\n\nhttps://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution\nShareAlike_3.0_Unported_License\n\n\nCC BY-SA\n\n\nAll of the source code is open source and available on github.  \n\n\nAgemaker\n\n\nCalculates age as decimal years.\n\n\nAgemaker calculates age as decimal years.  Users enter a birthday and press a button to reveal the age as decimal years.  Researchers or clinicians often want to record the age, in decimal, at a given time instead of a birth date and current date.  Interface works in English or Spanish.  No data is ever recorded or transmitted by this app.  Image credit: Sarah Neff\n\n\n\n\nAircraftcarriers\n\n\nContains facts, images and history of hundreds of carriers.\n\n\nAircraftcarriers contains facts, images and history of hundreds of aircraft carriers.  There is a page for every carrier, hundreds of images and a searchable database.\n\n\n\n\nyoutube\n\n\nAircraftcarriers contains facts and history of hundreds of carriers.  There is a page for every carrier, hundreds of images and a searchable database. The Navies button reveals one button for each navy with an aircraft carrier in its fleet.  The Carrier Images button allows you to scroll through a long list of carrier images.  The Summary buttons show basic information about each aircraft carrier in the chosen order.  The Aircraft Carriers button reveals the entire list of carriers.  The three text boxes, and their triggering Search Carriers button, search the database of text associated wth every carrier.  You may fill in any or all three text boxes.  Search terms are \nNOT\n case-sensitive.  Please \nDO NOT\n use quotes because search phrases are automatically quoted (assumed to be exact).  For example if you enter into the three text boxes:\n\n\nrear admiral\n\n\nSprague\n\n\nSamar\n\n\n...and hit the Search Carriers button, it will retrieve the 13 carriers that have all three of those exact phrases somewhere on the page for the carrier.  Search rules are simple but not as easy as Google.  As another example, if you want to find all of the carriers that have both of the words \nyokohama\n and \nsunk\n anywhere, then you would \nNOT\n search in the first box for this\n\n\nyokohama sunk\n\n\n...as you would on Google.  Instead you will want to put one term by itself in one of the three search boxes, like this\n\n\nyokohama\n\n\nsunk\n\n\nPutting both words into one search box will search for the exact phrase \nyokohama sunk\n, and in this example, will return zero results.  Separate boxes will yield two results for this example.  Word fragments work and so \n193\n will find carriers with any reference to a year in the 1930s.\nAlmost all text and imagery are under the license found here: en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution\nShareAlike_3.0_Unported_License\nThanks to aircraft carrier enthusiasts everywhere and to the wiki editors who wrote the information found here.  There are errors and omissions in this data.  Get the most accurate and up to date information here en.wikipedia.org/wiki/List_of_aircraft_carriers\n\n\nCivil War Generals\n\n\nContains history of all generals of the US Civil War.\n\n\nCivil War Generals contains facts and history of all generals of the US Civil War.  There is a page for every general, hundreds of images and a searchable database.  The Pictures button allows you to scroll through a long list of generals.  The three text boxes, and their triggering Search button, search the database of text associated wth every general. \n\n\nAll text and imagery are under the license found here: en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution\nShareAlike_3.0_Unported_License\n\n\nAll thanks go to civil war enthusiasts everywhere and to the wiki editors who wrote the information found here.\n\n\n\n\nDeadlyrics\n\n\nA searchable database of lyrics of many Grateful Dead songs.\n\n\n\n\nyoutube\n\n\nDeadquotes\n\n\nInteresting and funny quotes of famous people and characters.\n\n\nCollection of quotes by or about people and characters. These are enjoyable reads.\n\n\n\n\nyoutube\n\n\nDeadshowfinder\n\n\nDeadshowfinder Identify which show performance your Grateful Dead tape was recorded at.\n\n\nFIND THE SHOW ON YOUR GRATEFUL DEAD TAPE\n\n\nThe most important capability of this application, I hope, is its ability to identify which show performance your Grateful Dead tape was recorded at.  If you have an unlabeled tape, or a long mp3 file of a show, or otherwise need to discover which show the music was played at, this application can probably help to establish the truth.  It works like this:\n\n\n\n\nYou input two songs that were played consecutively at the show.  \n\n\nThe application displays the complete set lists for shows where the song sequence you submitted were played in the same order at the show.  \n\n\nYou browse the list of candidate shows to discover which show your tape was made from.  When you see a set list with the songs on your tape, in order, you have found the correct show.  At that point, you can label your tape with the date, location and set list for the show.  \n\n\n\n\nOTHER USES:\n\n\nYou can search shows by date and by location.  \n\n\nLIMITATIONS:\n\n\nThis application works because Jerry Stratton kindly compiled and shared his database of Dead shows (still available at gdead.berkeley.edu).  Unfortunately, the database has some modest inconsistency that makes this application less useful.  For example, when selecting a song and typing Fire, and wa\n\n\n\n\nyoutube\n\n\nDisasters Worldwide\n\n\nDisasters wordwide from 1900-2008\n\n\nA comprehensive listing of of over 17,000 disasters, natural and otherwise, from around the globe.\n\n\nSince 1988 the WHO Collaborating Centre for Research on the Epidemiology of Disasters (CRED) has been maintaining an Emergency Events Database EM-DAT. EM-DAT was created with the initial support of the WHO and the Belgian Government.\n\n\nThe main objective of the database is to serve the purposes of humanitarian action at national and international levels. It is an initiative aimed to rationalise decision making for disaster preparedness, as well as providing an objective base for vulnerability assessment and priority setting. For example, it allows on to decide whether floods in a given country are more significant in terms of its human impact than earthquakes or whether a country is more vulnerable than another for computing resources is.\n\n\nEM-DAT contains essential core data on the occurrence and effects of over 16,000 mass disasters in the world from 1900 to present. The database is compiled from various sources, including UN agencies, non-governmental organisations, insurance companies, research institutes and press agencies.\n\n\nThis is only public domain natural disaster database around (two other global sources are private: Sigma from Swiss Re and NatCat from Munich Re).\n\n\nThe EM-DAT database is protected by the law of 30 June 1994 on copyright and the law of 31 August 1998 on the legal protection of databases.\n\n\n\n\nyoutube\n\n\nFemale Astronauts\n\n\nWould you go on a one-way trip to Mars if the opportunity arose?\n\n\nFemale Astronauts lists every woman that has completed a spaceflight.  Thanks to these women, NASA and everyone that supports them.  \n\n\nThese astronauts are totally awesome.  In 2013, Valentina Tereshkova offered to go on a one-way trip to Mars if the opportunity arose.\n\n\nAll text and images were provided by the wikipedia authors.  Find the latest updates online at en.wikipedia.org/wiki/List_of_female_astronauts  All data are available under the Creative Commons Attribution-ShareAlike License at en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License \n\n\nLook up.  She is flying!\n\n\n\n\n\n\nFighterjets\n\n\nFour fighter aircraft made their first flight in 1913.\n\n\nFighterjets contains facts and history of hundreds of fighter aircraft.  There is a page for every fighter, dozens of images and a searchable database.  Searching without any search terms will cause you to be visited by an aircraft that you would rather not encounter.  Almost all text and imagery are under the license found here: en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License  Thanks to fighter aircraft mechanics, engineers, pilots, scientists, wikipedia editors and fighter enthusiasts everywhere.\n\n\n\n\n\n\nFixwdc\n\n\nFixwdc allows you to make and view requests made to any representative in the US\n\n\nThe purpose of Fixwdc is to make representation across America better.  Fixwdc allows you to make and view requests made to any representative in the United States.  Every representative can monitor requests made to their district.  If you click on the Make a Request button, after selecting a district, you will be able to enter and send your request.  The Favorite button will then remember this district so that you can quickly return to the Request page for that district.  Requests may be up to 500 characters.  If you have more to write, you can make multiple requests, part 1, part 2, etc.  The 500 character limit helps to make the requests searchable.  Anyone, including representatives, can see requests for any district on the web.  For example, requests made to Oklahoma_4th_district can be viewed at:\n\n\nfixwdc.appspot.com/district/Oklahoma_4th_district\n\n\nThere are over 400 districts in the US and each one will have a different way of receiving citizen requests.  Probably not via Fixwdc.  Fixwdc is designed to be free and easy to use for the citizen and the representative.  Requests are instantly and automatically edited to remove HTML tags, foul language and other unwanted request content.  Requests are publicly available at fixwdc.appspot.com and so please be nice!   There is an automated profanity filter in place based on the list of bad words kindly shared here: www.cs.cmu.edu/~biglou/resources/bad-words.txt.  Automatic filtering sometimes causes nice requests to be censored.  Automatic filtering does not prevent bad requests from getting through.  The system depends on you to make nice requests.  All requests are always public and always free to anyone.  If you want to spend less money, strengthen defense, or demand honesty, you can say so here.  The list of districts was pulled from wikipedia.  All of that data is shared under this license:\n\n\nText is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License\n\n\nFixamfm runs on free computer infrastructure, the best in the world, and on free code, average code at best.  You can probably find out who represents any district by starting here:\nen.wikipedia.org/wiki/List_of_United_States_congressional_districts  \n\n\nHave fun and be nice. \n\n\n\n\nLaotzutaotehking\n\n\nLao Tzu Tao Te Ching in Chinese and English\n\n\nLao Tzu Tao Te Ching in Chinese and English.  All 81 verses in chinese and in English as translated long ago by James Legge. Do enjoy Laozi, Lao-Tzu, Lao-Tze. The text is public domain via Gutenberg.  The image is from wikipedia via the license found here http://creativecommons.org/licenses/by-sa/3.0/\n\n\n\n\nNuclides\n\n\nNow you do know the binding energy of actinium 218.\n\n\nNuclides, nuclear data, isotopes.  Data about every element and every isotope.\n\n\n\n\nThanks to the scientists at the labs for discovering and sharing this data!\n\n\nNuclear and Radiochemistry \nby G. Friedlander, J. W. Kennedy, E. S. Macias, J. M. Miller \nISBN 9780471862550\n\n\nNational Nuclear Data Center, Brookhaven National Laboratory,\nhttp://www.nndc.bnl.gov/\n\n\nNuclear Data Center at Japan Atomic Energy Agency (JAEA)\nhttp://wwwndc.jaea.go.jp/\n\n\nNuclear Data Center, Korea Atomic Energy Research Institute\nhttp://atom.kaeri.re.kr/\n\n\nNuclear Science Division, Ernest O. Lawrence Berkeley National Laboratory\nhttp://ie.lbl.gov/\n\n\nNaturally occurring isotopes are shown in green.\n\n\nOther isotopes are shown below in red.\n\n\nRecord Labels\n\n\nRecord Labels searchable database.\n\n\n\n\nyoutube\n\n\nScottishwhiskydistilleries\n\n\nFacts, history, pictures and locations of scottish whisky distilleries.\n\n\n\n\nSearch for information about dozens of Scottish whisky distilleries.  The location of almost every Scottish distillery is available via Google Maps.  This app will take you directly to the distillery.  Almost all text and imagery are produced by Wikipedia editors and shared under the license found here: en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution\nShareAlike_3.0_Unported_License\n\n\nShuttle Flights\n\n\nNASA missions flown by space shuttles launched between 1981 and 2011. Shows data for all missions flown by space shuttles launched between 1981 and 2011.\n\n\nThanks to\n\nNASA, Lockheed, Martin Marietta, Rockwell, Wikipedia, US Air Force, Astronauts \nWe are not done with space\n\n\nCreative Commons Attribution-ShareAlike License\nhttp://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License\n\n\n\n\nyoutube\n\n\nUfosightings\n\n\nUfosightings is a database of almost 50,000 actual reports of UFO sightings.  This app weighs in at over 50MB and therefore is too big for the Google Play Store.  Find it on the Amazon store:\n\n\nUfosightings\n\n\nSource code is on github:\n\n\nhttps://github.com/botanyhelp/Ufosightings\n\n\n\n\nWwozplaylists\n\n\nThis app is no longer available.  To make a donation to WWOZ 90.7 FM by phone, call \n1 877 907 6999\n.  Get Brass Passes, become a member, or find another way to support WWOZ at \nwww.wwoz.org\n\n\nyoutube", 
            "title": "Android"
        }, 
        {
            "location": "/software/android/#android", 
            "text": "Learning android programming means learning java programming first.  New programmers cannot do better than Head First Java by Kathy Sierra, Bert Bates.  The very best (and very difficult) book on Java is The Java Programming Language by Arnold, Gosling and Holmes.  Bruce Eckel's Thinking in Java 4th edition provides very efficient learning.  Learning to program in Java is a steep climb that takes years before comfort sets in.    Almost all of the apps on this page are available on the Google Play Store.  About half were written in Eclipse and half in Android Studio.  Many of them have a read only embedded database, usually sqlite, with great data.  All of them run on almost every android phone.  Almost every one reports zero crashes.  Most of these apps were written in a few days with simple coding and standard patterns.  Most of them have data shared under this license:   https://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution ShareAlike_3.0_Unported_License  CC BY-SA  All of the source code is open source and available on github.", 
            "title": "Android"
        }, 
        {
            "location": "/software/android/#agemaker", 
            "text": "", 
            "title": "Agemaker"
        }, 
        {
            "location": "/software/android/#calculates-age-as-decimal-years", 
            "text": "", 
            "title": "Calculates age as decimal years."
        }, 
        {
            "location": "/software/android/#agemaker-calculates-age-as-decimal-years-users-enter-a-birthday-and-press-a-button-to-reveal-the-age-as-decimal-years-researchers-or-clinicians-often-want-to-record-the-age-in-decimal-at-a-given-time-instead-of-a-birth-date-and-current-date-interface-works-in-english-or-spanish-no-data-is-ever-recorded-or-transmitted-by-this-app-image-credit-sarah-neff", 
            "text": "", 
            "title": "Agemaker calculates age as decimal years.  Users enter a birthday and press a button to reveal the age as decimal years.  Researchers or clinicians often want to record the age, in decimal, at a given time instead of a birth date and current date.  Interface works in English or Spanish.  No data is ever recorded or transmitted by this app.  Image credit: Sarah Neff"
        }, 
        {
            "location": "/software/android/#aircraftcarriers", 
            "text": "", 
            "title": "Aircraftcarriers"
        }, 
        {
            "location": "/software/android/#contains-facts-images-and-history-of-hundreds-of-carriers", 
            "text": "", 
            "title": "Contains facts, images and history of hundreds of carriers."
        }, 
        {
            "location": "/software/android/#aircraftcarriers-contains-facts-images-and-history-of-hundreds-of-aircraft-carriers-there-is-a-page-for-every-carrier-hundreds-of-images-and-a-searchable-database", 
            "text": "youtube  Aircraftcarriers contains facts and history of hundreds of carriers.  There is a page for every carrier, hundreds of images and a searchable database. The Navies button reveals one button for each navy with an aircraft carrier in its fleet.  The Carrier Images button allows you to scroll through a long list of carrier images.  The Summary buttons show basic information about each aircraft carrier in the chosen order.  The Aircraft Carriers button reveals the entire list of carriers.  The three text boxes, and their triggering Search Carriers button, search the database of text associated wth every carrier.  You may fill in any or all three text boxes.  Search terms are  NOT  case-sensitive.  Please  DO NOT  use quotes because search phrases are automatically quoted (assumed to be exact).  For example if you enter into the three text boxes:  rear admiral  Sprague  Samar  ...and hit the Search Carriers button, it will retrieve the 13 carriers that have all three of those exact phrases somewhere on the page for the carrier.  Search rules are simple but not as easy as Google.  As another example, if you want to find all of the carriers that have both of the words  yokohama  and  sunk  anywhere, then you would  NOT  search in the first box for this  yokohama sunk  ...as you would on Google.  Instead you will want to put one term by itself in one of the three search boxes, like this  yokohama  sunk  Putting both words into one search box will search for the exact phrase  yokohama sunk , and in this example, will return zero results.  Separate boxes will yield two results for this example.  Word fragments work and so  193  will find carriers with any reference to a year in the 1930s.\nAlmost all text and imagery are under the license found here: en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution ShareAlike_3.0_Unported_License\nThanks to aircraft carrier enthusiasts everywhere and to the wiki editors who wrote the information found here.  There are errors and omissions in this data.  Get the most accurate and up to date information here en.wikipedia.org/wiki/List_of_aircraft_carriers", 
            "title": "Aircraftcarriers contains facts, images and history of hundreds of aircraft carriers.  There is a page for every carrier, hundreds of images and a searchable database."
        }, 
        {
            "location": "/software/android/#civil-war-generals", 
            "text": "", 
            "title": "Civil War Generals"
        }, 
        {
            "location": "/software/android/#contains-history-of-all-generals-of-the-us-civil-war", 
            "text": "Civil War Generals contains facts and history of all generals of the US Civil War.  There is a page for every general, hundreds of images and a searchable database.  The Pictures button allows you to scroll through a long list of generals.  The three text boxes, and their triggering Search button, search the database of text associated wth every general.   All text and imagery are under the license found here: en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution ShareAlike_3.0_Unported_License  All thanks go to civil war enthusiasts everywhere and to the wiki editors who wrote the information found here.", 
            "title": "Contains history of all generals of the US Civil War."
        }, 
        {
            "location": "/software/android/#deadlyrics", 
            "text": "", 
            "title": "Deadlyrics"
        }, 
        {
            "location": "/software/android/#a-searchable-database-of-lyrics-of-many-grateful-dead-songs", 
            "text": "youtube", 
            "title": "A searchable database of lyrics of many Grateful Dead songs."
        }, 
        {
            "location": "/software/android/#deadquotes", 
            "text": "", 
            "title": "Deadquotes"
        }, 
        {
            "location": "/software/android/#interesting-and-funny-quotes-of-famous-people-and-characters", 
            "text": "Collection of quotes by or about people and characters. These are enjoyable reads.   youtube", 
            "title": "Interesting and funny quotes of famous people and characters."
        }, 
        {
            "location": "/software/android/#deadshowfinder", 
            "text": "", 
            "title": "Deadshowfinder"
        }, 
        {
            "location": "/software/android/#deadshowfinder-identify-which-show-performance-your-grateful-dead-tape-was-recorded-at", 
            "text": "FIND THE SHOW ON YOUR GRATEFUL DEAD TAPE  The most important capability of this application, I hope, is its ability to identify which show performance your Grateful Dead tape was recorded at.  If you have an unlabeled tape, or a long mp3 file of a show, or otherwise need to discover which show the music was played at, this application can probably help to establish the truth.  It works like this:   You input two songs that were played consecutively at the show.    The application displays the complete set lists for shows where the song sequence you submitted were played in the same order at the show.    You browse the list of candidate shows to discover which show your tape was made from.  When you see a set list with the songs on your tape, in order, you have found the correct show.  At that point, you can label your tape with the date, location and set list for the show.     OTHER USES:  You can search shows by date and by location.    LIMITATIONS:  This application works because Jerry Stratton kindly compiled and shared his database of Dead shows (still available at gdead.berkeley.edu).  Unfortunately, the database has some modest inconsistency that makes this application less useful.  For example, when selecting a song and typing Fire, and wa   youtube", 
            "title": "Deadshowfinder Identify which show performance your Grateful Dead tape was recorded at."
        }, 
        {
            "location": "/software/android/#disasters-worldwide", 
            "text": "", 
            "title": "Disasters Worldwide"
        }, 
        {
            "location": "/software/android/#disasters-wordwide-from-1900-2008", 
            "text": "A comprehensive listing of of over 17,000 disasters, natural and otherwise, from around the globe.  Since 1988 the WHO Collaborating Centre for Research on the Epidemiology of Disasters (CRED) has been maintaining an Emergency Events Database EM-DAT. EM-DAT was created with the initial support of the WHO and the Belgian Government.  The main objective of the database is to serve the purposes of humanitarian action at national and international levels. It is an initiative aimed to rationalise decision making for disaster preparedness, as well as providing an objective base for vulnerability assessment and priority setting. For example, it allows on to decide whether floods in a given country are more significant in terms of its human impact than earthquakes or whether a country is more vulnerable than another for computing resources is.  EM-DAT contains essential core data on the occurrence and effects of over 16,000 mass disasters in the world from 1900 to present. The database is compiled from various sources, including UN agencies, non-governmental organisations, insurance companies, research institutes and press agencies.  This is only public domain natural disaster database around (two other global sources are private: Sigma from Swiss Re and NatCat from Munich Re).  The EM-DAT database is protected by the law of 30 June 1994 on copyright and the law of 31 August 1998 on the legal protection of databases.   youtube", 
            "title": "Disasters wordwide from 1900-2008"
        }, 
        {
            "location": "/software/android/#female-astronauts", 
            "text": "", 
            "title": "Female Astronauts"
        }, 
        {
            "location": "/software/android/#would-you-go-on-a-one-way-trip-to-mars-if-the-opportunity-arose", 
            "text": "Female Astronauts lists every woman that has completed a spaceflight.  Thanks to these women, NASA and everyone that supports them.    These astronauts are totally awesome.  In 2013, Valentina Tereshkova offered to go on a one-way trip to Mars if the opportunity arose.  All text and images were provided by the wikipedia authors.  Find the latest updates online at en.wikipedia.org/wiki/List_of_female_astronauts  All data are available under the Creative Commons Attribution-ShareAlike License at en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License   Look up.  She is flying!", 
            "title": "Would you go on a one-way trip to Mars if the opportunity arose?"
        }, 
        {
            "location": "/software/android/#fighterjets", 
            "text": "", 
            "title": "Fighterjets"
        }, 
        {
            "location": "/software/android/#four-fighter-aircraft-made-their-first-flight-in-1913", 
            "text": "Fighterjets contains facts and history of hundreds of fighter aircraft.  There is a page for every fighter, dozens of images and a searchable database.  Searching without any search terms will cause you to be visited by an aircraft that you would rather not encounter.  Almost all text and imagery are under the license found here: en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License  Thanks to fighter aircraft mechanics, engineers, pilots, scientists, wikipedia editors and fighter enthusiasts everywhere.", 
            "title": "Four fighter aircraft made their first flight in 1913."
        }, 
        {
            "location": "/software/android/#fixwdc", 
            "text": "", 
            "title": "Fixwdc"
        }, 
        {
            "location": "/software/android/#fixwdc-allows-you-to-make-and-view-requests-made-to-any-representative-in-the-us", 
            "text": "The purpose of Fixwdc is to make representation across America better.  Fixwdc allows you to make and view requests made to any representative in the United States.  Every representative can monitor requests made to their district.  If you click on the Make a Request button, after selecting a district, you will be able to enter and send your request.  The Favorite button will then remember this district so that you can quickly return to the Request page for that district.  Requests may be up to 500 characters.  If you have more to write, you can make multiple requests, part 1, part 2, etc.  The 500 character limit helps to make the requests searchable.  Anyone, including representatives, can see requests for any district on the web.  For example, requests made to Oklahoma_4th_district can be viewed at:  fixwdc.appspot.com/district/Oklahoma_4th_district  There are over 400 districts in the US and each one will have a different way of receiving citizen requests.  Probably not via Fixwdc.  Fixwdc is designed to be free and easy to use for the citizen and the representative.  Requests are instantly and automatically edited to remove HTML tags, foul language and other unwanted request content.  Requests are publicly available at fixwdc.appspot.com and so please be nice!   There is an automated profanity filter in place based on the list of bad words kindly shared here: www.cs.cmu.edu/~biglou/resources/bad-words.txt.  Automatic filtering sometimes causes nice requests to be censored.  Automatic filtering does not prevent bad requests from getting through.  The system depends on you to make nice requests.  All requests are always public and always free to anyone.  If you want to spend less money, strengthen defense, or demand honesty, you can say so here.  The list of districts was pulled from wikipedia.  All of that data is shared under this license:  Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License  Fixamfm runs on free computer infrastructure, the best in the world, and on free code, average code at best.  You can probably find out who represents any district by starting here:\nen.wikipedia.org/wiki/List_of_United_States_congressional_districts    Have fun and be nice.", 
            "title": "Fixwdc allows you to make and view requests made to any representative in the US"
        }, 
        {
            "location": "/software/android/#laotzutaotehking", 
            "text": "", 
            "title": "Laotzutaotehking"
        }, 
        {
            "location": "/software/android/#lao-tzu-tao-te-ching-in-chinese-and-english", 
            "text": "Lao Tzu Tao Te Ching in Chinese and English.  All 81 verses in chinese and in English as translated long ago by James Legge. Do enjoy Laozi, Lao-Tzu, Lao-Tze. The text is public domain via Gutenberg.  The image is from wikipedia via the license found here http://creativecommons.org/licenses/by-sa/3.0/", 
            "title": "Lao Tzu Tao Te Ching in Chinese and English"
        }, 
        {
            "location": "/software/android/#nuclides", 
            "text": "", 
            "title": "Nuclides"
        }, 
        {
            "location": "/software/android/#now-you-do-know-the-binding-energy-of-actinium-218", 
            "text": "Nuclides, nuclear data, isotopes.  Data about every element and every isotope.   Thanks to the scientists at the labs for discovering and sharing this data!  Nuclear and Radiochemistry \nby G. Friedlander, J. W. Kennedy, E. S. Macias, J. M. Miller \nISBN 9780471862550  National Nuclear Data Center, Brookhaven National Laboratory,\nhttp://www.nndc.bnl.gov/  Nuclear Data Center at Japan Atomic Energy Agency (JAEA)\nhttp://wwwndc.jaea.go.jp/  Nuclear Data Center, Korea Atomic Energy Research Institute\nhttp://atom.kaeri.re.kr/  Nuclear Science Division, Ernest O. Lawrence Berkeley National Laboratory\nhttp://ie.lbl.gov/  Naturally occurring isotopes are shown in green.  Other isotopes are shown below in red.", 
            "title": "Now you do know the binding energy of actinium 218."
        }, 
        {
            "location": "/software/android/#record-labels", 
            "text": "", 
            "title": "Record Labels"
        }, 
        {
            "location": "/software/android/#record-labels-searchable-database", 
            "text": "youtube", 
            "title": "Record Labels searchable database."
        }, 
        {
            "location": "/software/android/#scottishwhiskydistilleries", 
            "text": "", 
            "title": "Scottishwhiskydistilleries"
        }, 
        {
            "location": "/software/android/#facts-history-pictures-and-locations-of-scottish-whisky-distilleries", 
            "text": "Search for information about dozens of Scottish whisky distilleries.  The location of almost every Scottish distillery is available via Google Maps.  This app will take you directly to the distillery.  Almost all text and imagery are produced by Wikipedia editors and shared under the license found here: en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution ShareAlike_3.0_Unported_License", 
            "title": "Facts, history, pictures and locations of scottish whisky distilleries."
        }, 
        {
            "location": "/software/android/#shuttle-flights", 
            "text": "", 
            "title": "Shuttle Flights"
        }, 
        {
            "location": "/software/android/#nasa-missions-flown-by-space-shuttles-launched-between-1981-and-2011-shows-data-for-all-missions-flown-by-space-shuttles-launched-between-1981-and-2011", 
            "text": "Thanks to \nNASA, Lockheed, Martin Marietta, Rockwell, Wikipedia, US Air Force, Astronauts \nWe are not done with space  Creative Commons Attribution-ShareAlike License\nhttp://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License   youtube", 
            "title": "NASA missions flown by space shuttles launched between 1981 and 2011. Shows data for all missions flown by space shuttles launched between 1981 and 2011."
        }, 
        {
            "location": "/software/android/#ufosightings", 
            "text": "Ufosightings is a database of almost 50,000 actual reports of UFO sightings.  This app weighs in at over 50MB and therefore is too big for the Google Play Store.  Find it on the Amazon store:  Ufosightings  Source code is on github:  https://github.com/botanyhelp/Ufosightings", 
            "title": "Ufosightings"
        }, 
        {
            "location": "/software/android/#wwozplaylists", 
            "text": "", 
            "title": "Wwozplaylists"
        }, 
        {
            "location": "/software/android/#this-app-is-no-longer-available-to-make-a-donation-to-wwoz-907-fm-by-phone-call-1-877-907-6999-get-brass-passes-become-a-member-or-find-another-way-to-support-wwoz-at-wwwwwozorg", 
            "text": "youtube", 
            "title": "This app is no longer available.  To make a donation to WWOZ 90.7 FM by phone, call 1 877 907 6999.  Get Brass Passes, become a member, or find another way to support WWOZ at www.wwoz.org"
        }, 
        {
            "location": "/software/python/", 
            "text": "Python\n\n\nPython is the best programming language to learn for almost everyone.  Its beauty, easy, ubiquity, power and quality make it so.  The best book for learning python hasn't been written yet.  Experienced programmers might like Mark Pilgrim's Dive Into Python and/or Dive Into Python 3.  Newer programmers should possibly start with Luciano Ramalho's Fluent Python.  Mark Lutz's Learning Python and Programming Python and Paul Barry's Head First Python are good books but are \nnot\n for learning python.  Almost everyone agrees that new learners should learn \npython 3\n instead of python 2. \n\n\nGoogle App Engine Wisconsin Herbarium\n\n\nPython web application running on Google App Engine infrastructure at:\n\n\nhttp://wisconsinherbarium.appspot.com/\n\n\n..all of the code is open source and available at:\n\n\nhttps://github.com/botanyhelp/Herbpythonappengine\n\n\nPython web application \nFix AM FM\n\n\n..deployed and running on Google App Engine infrastructure at:\n\n\nhttp://fixamfm.appspot.com/\n\n\n..all of the code is open source and available at:\n\n\nhttps://github.com/botanyhelp/fixamfm\n\n\nThe application allows visitors create song requests to any/every radio station in America.  There is a modest \"captcha\" system to fend off robots.\n\n\nAlbumartmaker\n\n\nPython program to read text and create a 300x300 image file of the text. \n\n\nAlbum art are those things you see on the ipod when playing a song.  Its \npart of the ID3 tag system of mp3 files.  Circa 2010 ipods displayed 300x300 \npng files nicely.  This program only makes the 300x300 image file.  The \ntext to be put into the image (and many other details) are hardcoded into \nthe program.  It would be most useful with many MP3 files where you know \nthe text you want to put into the image.  If your MP3 has six songs in it \nand you want to make an image with 6 artist/album/song listings, then this \nprogram can do it.  Notice that this program will only create the image file. \nYou'll need another program to push it into your existing MP3 file's tag. \n\n\nYou can test it like this:\n\n\npython piller2.py\n\n\n\n\n...and you will have a new PNG file in the current directory:\n\n\ntest.png\n\n\nRequires modules Image, ImageDraw, and texwrap\nWill use ImageFont if you have them (/usr/share/fonts/bitstream-vera/Vera.ttf)\n\n\nCode is open source and available on github:\n\n\nhttps://github.com/botanyhelp/Albumartmaker\n\n\nSearchyumrepos\n\n\nSearch yum software repositories for your list of software.\n\n\nCode is open source and available on github:\n\n\nhttps://github.com/botanyhelp/Searchyumrepos\n\n\nHere we run it and learn that this linux machine does not have the remi repository installed.  You will need to edit the python to add your list of repositories, which are hardcoded. \n\n\npython searchyumrepos.py anaconda\nABOUT TO RUN THIS COMMAND:\n\nyum list --enablerepo=epel --enablerepo=remi --enablerepo=rpmforge --enablerepo=atrpms --enablerepo=R-project anaconda\nLoaded plugins: fastestmirror, refresh-packagekit, security\n\n\nError getting repository data for remi, repository not found\n\n\n\n\nGmailer\n\n\nGmailer is a short python script to use gmail to send email\n\n\nhttps://github.com/botanyhelp/Gmailer\n\n\nUcscdiskspacer\n\n\nProgram to report total size, in bytes, of UCSC genome browser databases\nIt is useful to estimate how large the databases are before you download. \n\n\nUse it like this for a zebrafish and human assembly:\n\n\npython ucsc_disk_spacer.py danRer5 hg19\n\n\n\n\nAvailable on github:\n\n\nhttps://github.com/botanyhelp/Ucscdiskspacer\n\n\nUcscquery\n\n\nPython standalone program to query UCSC Genome Browser Mysql database\n\n\nRequires module MySQLdb\n\nRequires internet access\n\n\nHardcoded username and database.  Only the database will need to be changed by you...you would change 'mm9' to 'hg19' if you want to change from Mouse to Human organism. \n\n\nThis program performs steps that can be run manually like this:\n\n\nmysql --user=genome --host=genome-mysql.cse.ucsc.edu -A\nmysql\n use mm9;\nDatabase changed\nmysql\n select * from knownCanonical;\n\n\n\n\nThe UCSC Genome Browser provides a public mysql server.  Python program ucscquery.py shows how to query that server.  The public server, username and password are embedded in the program.  There are hundreds of databases, one for each assembly.  The program hardcodes the mm9 assembly of the Mouse organism.  The query execution returns a long, which we promptly convert to an int.  We then use that to fetch every record one at a time in a loop.  Understanding the databases and their tables is not easy.  The schema is designed primarily to support the genome browser at genome.ucsc.edu.  Even so, clever querying is possible.  Good luck.\n\n\nCode available on github:\n\n\nhttps://github.com/botanyhelp/Ucscquery\n\n\nBotitwebmaker\n\n\nPython program that generates HTML web site from a directory of image files.  Generates the content found here:\n\n\nhttp://botit.botany.wisc.edu/\n\n\nThe README documentation for botitwebmaker is \nembedded in the program itself.  Running it \ncan be done by placing the program in the \nroot directory of a directory tree of image \nfiles.  The (only!) website that uses it can \nbe found here: http://botit.botany.wisc.edu/\n\n\nCode available on github:\n\n\nhttps://github.com/botanyhelp/Botitwebmaker\n\n\nQRCode\n\n\nQR codes are those things we see everywhere on ads that let mobile phone/camera users snap to take them to a URL. We want them for Facebase posters.\nThis ruby code creates png formatted images of the QR codes. It also dumps text which can be used to create an HTML/CSS version of the QR code:\n\n\nqrHTMLandPNGmaker.rb\n\n\n\n\nThat ruby doesn't actually dump HTML, only text with and 'x' character for dark and a \"space\" character for light. That text output can be used to create HTML/CSS that displays the QR code as an HTML table. This python program reads the output from the ruby program (the text output) and writes HTML/CSS to generate the QR code:\n\n\nqrHTMLmaker.py\n\n\n\n\nThe ruby requires some modules that are probably not present. Install them with gem like this:\n\n\ngem install rqrcode\ngem install rqrcode_png\n\n\n\n\nNOTICE that the URLs are hardcoded into the ruby.\nNOTICE that the file qr.txt produced by the ruby is a hardcoded input filename in the python.\nThe whole thing was run like this:\n\n\nruby qrHTMLandPNGmaker.rb \n rb.txt\npython qrHTMLmaker.py \n qr_codes.html\n\n\n\n\nAfter running the ruby program, six new 300x300 PNG-formatted images will be created in the current directory. The output HTML from the python can be dropped right into any HTML file and will display the QR codes.\n\n\nAvailable on github: \n\nhttps://github.com/botanyhelp/Qrcode\n\n\nPython web application \nFix WDC\n\n\n..deployed and running on Google App Engine infrastructure at:\n\n\nhttp://fixwdc.appspot.com/\n\n\nfixwdc allows you to send a request to any congressional district in America. Any representative can monitor the requests that are made. Please be respectful.  \n\n\nThis application stores all submissions in the Google Data Store associated with this application.  Because login is not required, a very tedious automated system is in place to censor and eliminate", 
            "title": "Python"
        }, 
        {
            "location": "/software/python/#python", 
            "text": "Python is the best programming language to learn for almost everyone.  Its beauty, easy, ubiquity, power and quality make it so.  The best book for learning python hasn't been written yet.  Experienced programmers might like Mark Pilgrim's Dive Into Python and/or Dive Into Python 3.  Newer programmers should possibly start with Luciano Ramalho's Fluent Python.  Mark Lutz's Learning Python and Programming Python and Paul Barry's Head First Python are good books but are  not  for learning python.  Almost everyone agrees that new learners should learn  python 3  instead of python 2.", 
            "title": "Python"
        }, 
        {
            "location": "/software/python/#google-app-engine-wisconsin-herbarium", 
            "text": "Python web application running on Google App Engine infrastructure at:  http://wisconsinherbarium.appspot.com/  ..all of the code is open source and available at:  https://github.com/botanyhelp/Herbpythonappengine", 
            "title": "Google App Engine Wisconsin Herbarium"
        }, 
        {
            "location": "/software/python/#python-web-application-fix-am-fm", 
            "text": "..deployed and running on Google App Engine infrastructure at:  http://fixamfm.appspot.com/  ..all of the code is open source and available at:  https://github.com/botanyhelp/fixamfm  The application allows visitors create song requests to any/every radio station in America.  There is a modest \"captcha\" system to fend off robots.", 
            "title": "Python web application Fix AM FM"
        }, 
        {
            "location": "/software/python/#albumartmaker", 
            "text": "Python program to read text and create a 300x300 image file of the text.   Album art are those things you see on the ipod when playing a song.  Its \npart of the ID3 tag system of mp3 files.  Circa 2010 ipods displayed 300x300 \npng files nicely.  This program only makes the 300x300 image file.  The \ntext to be put into the image (and many other details) are hardcoded into \nthe program.  It would be most useful with many MP3 files where you know \nthe text you want to put into the image.  If your MP3 has six songs in it \nand you want to make an image with 6 artist/album/song listings, then this \nprogram can do it.  Notice that this program will only create the image file. \nYou'll need another program to push it into your existing MP3 file's tag.   You can test it like this:  python piller2.py  ...and you will have a new PNG file in the current directory:  test.png  Requires modules Image, ImageDraw, and texwrap\nWill use ImageFont if you have them (/usr/share/fonts/bitstream-vera/Vera.ttf)  Code is open source and available on github:  https://github.com/botanyhelp/Albumartmaker", 
            "title": "Albumartmaker"
        }, 
        {
            "location": "/software/python/#searchyumrepos", 
            "text": "Search yum software repositories for your list of software.  Code is open source and available on github:  https://github.com/botanyhelp/Searchyumrepos  Here we run it and learn that this linux machine does not have the remi repository installed.  You will need to edit the python to add your list of repositories, which are hardcoded.   python searchyumrepos.py anaconda\nABOUT TO RUN THIS COMMAND:\n\nyum list --enablerepo=epel --enablerepo=remi --enablerepo=rpmforge --enablerepo=atrpms --enablerepo=R-project anaconda\nLoaded plugins: fastestmirror, refresh-packagekit, security\n\n\nError getting repository data for remi, repository not found", 
            "title": "Searchyumrepos"
        }, 
        {
            "location": "/software/python/#gmailer", 
            "text": "Gmailer is a short python script to use gmail to send email  https://github.com/botanyhelp/Gmailer", 
            "title": "Gmailer"
        }, 
        {
            "location": "/software/python/#ucscdiskspacer", 
            "text": "Program to report total size, in bytes, of UCSC genome browser databases\nIt is useful to estimate how large the databases are before you download.   Use it like this for a zebrafish and human assembly:  python ucsc_disk_spacer.py danRer5 hg19  Available on github:  https://github.com/botanyhelp/Ucscdiskspacer", 
            "title": "Ucscdiskspacer"
        }, 
        {
            "location": "/software/python/#ucscquery", 
            "text": "Python standalone program to query UCSC Genome Browser Mysql database  Requires module MySQLdb Requires internet access  Hardcoded username and database.  Only the database will need to be changed by you...you would change 'mm9' to 'hg19' if you want to change from Mouse to Human organism.   This program performs steps that can be run manually like this:  mysql --user=genome --host=genome-mysql.cse.ucsc.edu -A\nmysql  use mm9;\nDatabase changed\nmysql  select * from knownCanonical;  The UCSC Genome Browser provides a public mysql server.  Python program ucscquery.py shows how to query that server.  The public server, username and password are embedded in the program.  There are hundreds of databases, one for each assembly.  The program hardcodes the mm9 assembly of the Mouse organism.  The query execution returns a long, which we promptly convert to an int.  We then use that to fetch every record one at a time in a loop.  Understanding the databases and their tables is not easy.  The schema is designed primarily to support the genome browser at genome.ucsc.edu.  Even so, clever querying is possible.  Good luck.  Code available on github:  https://github.com/botanyhelp/Ucscquery", 
            "title": "Ucscquery"
        }, 
        {
            "location": "/software/python/#botitwebmaker", 
            "text": "Python program that generates HTML web site from a directory of image files.  Generates the content found here:  http://botit.botany.wisc.edu/  The README documentation for botitwebmaker is \nembedded in the program itself.  Running it \ncan be done by placing the program in the \nroot directory of a directory tree of image \nfiles.  The (only!) website that uses it can \nbe found here: http://botit.botany.wisc.edu/  Code available on github:  https://github.com/botanyhelp/Botitwebmaker", 
            "title": "Botitwebmaker"
        }, 
        {
            "location": "/software/python/#qrcode", 
            "text": "QR codes are those things we see everywhere on ads that let mobile phone/camera users snap to take them to a URL. We want them for Facebase posters.\nThis ruby code creates png formatted images of the QR codes. It also dumps text which can be used to create an HTML/CSS version of the QR code:  qrHTMLandPNGmaker.rb  That ruby doesn't actually dump HTML, only text with and 'x' character for dark and a \"space\" character for light. That text output can be used to create HTML/CSS that displays the QR code as an HTML table. This python program reads the output from the ruby program (the text output) and writes HTML/CSS to generate the QR code:  qrHTMLmaker.py  The ruby requires some modules that are probably not present. Install them with gem like this:  gem install rqrcode\ngem install rqrcode_png  NOTICE that the URLs are hardcoded into the ruby.\nNOTICE that the file qr.txt produced by the ruby is a hardcoded input filename in the python.\nThe whole thing was run like this:  ruby qrHTMLandPNGmaker.rb   rb.txt\npython qrHTMLmaker.py   qr_codes.html  After running the ruby program, six new 300x300 PNG-formatted images will be created in the current directory. The output HTML from the python can be dropped right into any HTML file and will display the QR codes.  Available on github:  https://github.com/botanyhelp/Qrcode", 
            "title": "QRCode"
        }, 
        {
            "location": "/software/python/#python-web-application-fix-wdc", 
            "text": "..deployed and running on Google App Engine infrastructure at:  http://fixwdc.appspot.com/  fixwdc allows you to send a request to any congressional district in America. Any representative can monitor the requests that are made. Please be respectful.    This application stores all submissions in the Google Data Store associated with this application.  Because login is not required, a very tedious automated system is in place to censor and eliminate", 
            "title": "Python web application Fix WDC"
        }, 
        {
            "location": "/software/java/", 
            "text": "Java\n\n\nNew programmers cannot do better than Head First Java by Kathy Sierra, Bert Bates for learning java.  The very best (and very difficult) book on Java is The Java Programming Language by Arnold, Gosling and Holmes.  Bruce Eckel's Thinking in Java 4th edition provides very efficient learning.  Learning to program in Java is a steep climb that takes years before comfort sets in.\n\n\nAndroid applications\n\n\nSee a dozen android applications written in java\n\n/software/android/\n\n\nHerbjava\n\n\nWisconsin Herbarium tomcat web database application.  This code, when running, will perform very similarly to the existing perl, python and OTS web servers running here:\n\n\nhttp://www.botany.wisc.edu/wisflora/\n\n\nhttp://wisconsinherbarium.appspot.com/\n\n\nhttp://herbarium.wisc.edu/\n\n\nOpen source code available on github:\n\n\nhttps://github.com/botanyhelp/Herbjava\n\n\nThis application is \nnot running anywhere\n to my knowledge.  As a standard tomcat servlet application, it is a port of existing production web servers.  The documentation on github has enough deployment details to get it started again using existing database schema.", 
            "title": "Java"
        }, 
        {
            "location": "/software/java/#java", 
            "text": "New programmers cannot do better than Head First Java by Kathy Sierra, Bert Bates for learning java.  The very best (and very difficult) book on Java is The Java Programming Language by Arnold, Gosling and Holmes.  Bruce Eckel's Thinking in Java 4th edition provides very efficient learning.  Learning to program in Java is a steep climb that takes years before comfort sets in.", 
            "title": "Java"
        }, 
        {
            "location": "/software/java/#android-applications", 
            "text": "See a dozen android applications written in java /software/android/", 
            "title": "Android applications"
        }, 
        {
            "location": "/software/java/#herbjava", 
            "text": "Wisconsin Herbarium tomcat web database application.  This code, when running, will perform very similarly to the existing perl, python and OTS web servers running here:  http://www.botany.wisc.edu/wisflora/  http://wisconsinherbarium.appspot.com/  http://herbarium.wisc.edu/  Open source code available on github:  https://github.com/botanyhelp/Herbjava  This application is  not running anywhere  to my knowledge.  As a standard tomcat servlet application, it is a port of existing production web servers.  The documentation on github has enough deployment details to get it started again using existing database schema.", 
            "title": "Herbjava"
        }, 
        {
            "location": "/software/javascript/", 
            "text": "Javascript\n\n\nLearning Javascript should be done with these two books, read in this order:\n\n\n\n\nHead First JavaScript Programming by Eric T. Freeman, Elisabeth Robson\n\n\nJavaScript: The Good Parts by Douglas Crockford\n\n\n\n\nJavascript libraries like jQuery are often useful.  However, you might find that life is better when you keep your web pages simple, use Javascript purposefully, and write it yourself without libraries.  Do prefer to become a javascript programmer (instead of, for example, a jQuery programmer).  This style of \navoiding javascript libraries\n is a style, not a religion.  Many javascript libraries target a specific functionality.  When you need such functionality, using such libraries will boost the quality and performance of your code and save you lots of time and effort.  One example of such a library is Lea Verou's awesomplete, which is totally awesome. \n\n\nAwesomplete javascript autocompletion with 28510 gene symbols\n\n\nLea Verou's \nAwesomplete\n is an easy to use and totally awesome little javascript library.  \n\n\nThis \nshort web form\n selects and displays candidate gene symbols that you start typing with auto-completion.  It selects candidate gene symbols from a long list of 28510 genes.  This javascript was used to limit form submissions to only the list of genes that will be considered by Michigan's excellent \nlocuszoom\n program.\n\n\nCode is available on github:\n\n\nhttps://github.com/botanyhelp/Agemakeroffline/blob/master/gene.html\n\n\nUCSC Genome Browser dynamic custom track documentation\n\n\nAdding dynamic javascript to a UCSC genome browser custom track documentation file is possible.  This particular javascript uses the specific location on the genome where the user was browsing to decide what links to display on the documentation page.  This strategy would be useful for a single custom track that represents dozens of experimental units across dozens of URLs.  \n\n\nThis HTML/Javascript file can be used as dynamic documentation with a local track on the UCSC genome browser at genome.ucsc.edu.  The javascript makes an AJAX request to fetch a JSON formatted data file, which it parses and uses to manage the display of the documentation for the local track.  Very large local track files that span wide areas of the genome may want the documentation to change depending on where the current genome browser visitor is on the genome.  This experimental Javascript achieves that by finding the location being viewed, finding the interesting locations (via AJAX fetch of JSON datafile), and dynamically displaying the documentation that is relevant. \n\n\nCode is available on github:\n\n\nhttps://github.com/botanyhelp/Gbjavascript\n\n\nAgemaker age calculating web page.\n\n\nhttp://www.pitt.edu/~twm11/agemaker.html\n\n\nThe application logic is written in Javascript and uses the entered birthdate to calculate the current age to one decimal place.  This application is useful for researchers that wish to record the present age of participants (instead of entering a birthdate and current date).  Sometimes the current age is the desired value.  This web application also has the benefit of being an offline web app.  Therefore, when you revisit this URL later, when you have no Internet connection, it still works (on all modern web browsers).  It also has the benefit of not recording or transmitting any data. \n\n\nThe javascript, HTML5 and everything is in one file, agemaker.html, available on github:\n\n\nhttps://github.com/botanyhelp/Agemakeroffline", 
            "title": "Javascript"
        }, 
        {
            "location": "/software/javascript/#javascript", 
            "text": "Learning Javascript should be done with these two books, read in this order:   Head First JavaScript Programming by Eric T. Freeman, Elisabeth Robson  JavaScript: The Good Parts by Douglas Crockford   Javascript libraries like jQuery are often useful.  However, you might find that life is better when you keep your web pages simple, use Javascript purposefully, and write it yourself without libraries.  Do prefer to become a javascript programmer (instead of, for example, a jQuery programmer).  This style of  avoiding javascript libraries  is a style, not a religion.  Many javascript libraries target a specific functionality.  When you need such functionality, using such libraries will boost the quality and performance of your code and save you lots of time and effort.  One example of such a library is Lea Verou's awesomplete, which is totally awesome.", 
            "title": "Javascript"
        }, 
        {
            "location": "/software/javascript/#awesomplete-javascript-autocompletion-with-28510-gene-symbols", 
            "text": "Lea Verou's  Awesomplete  is an easy to use and totally awesome little javascript library.    This  short web form  selects and displays candidate gene symbols that you start typing with auto-completion.  It selects candidate gene symbols from a long list of 28510 genes.  This javascript was used to limit form submissions to only the list of genes that will be considered by Michigan's excellent  locuszoom  program.  Code is available on github:  https://github.com/botanyhelp/Agemakeroffline/blob/master/gene.html", 
            "title": "Awesomplete javascript autocompletion with 28510 gene symbols"
        }, 
        {
            "location": "/software/javascript/#ucsc-genome-browser-dynamic-custom-track-documentation", 
            "text": "Adding dynamic javascript to a UCSC genome browser custom track documentation file is possible.  This particular javascript uses the specific location on the genome where the user was browsing to decide what links to display on the documentation page.  This strategy would be useful for a single custom track that represents dozens of experimental units across dozens of URLs.    This HTML/Javascript file can be used as dynamic documentation with a local track on the UCSC genome browser at genome.ucsc.edu.  The javascript makes an AJAX request to fetch a JSON formatted data file, which it parses and uses to manage the display of the documentation for the local track.  Very large local track files that span wide areas of the genome may want the documentation to change depending on where the current genome browser visitor is on the genome.  This experimental Javascript achieves that by finding the location being viewed, finding the interesting locations (via AJAX fetch of JSON datafile), and dynamically displaying the documentation that is relevant.   Code is available on github:  https://github.com/botanyhelp/Gbjavascript", 
            "title": "UCSC Genome Browser dynamic custom track documentation"
        }, 
        {
            "location": "/software/javascript/#agemaker-age-calculating-web-page", 
            "text": "http://www.pitt.edu/~twm11/agemaker.html  The application logic is written in Javascript and uses the entered birthdate to calculate the current age to one decimal place.  This application is useful for researchers that wish to record the present age of participants (instead of entering a birthdate and current date).  Sometimes the current age is the desired value.  This web application also has the benefit of being an offline web app.  Therefore, when you revisit this URL later, when you have no Internet connection, it still works (on all modern web browsers).  It also has the benefit of not recording or transmitting any data.   The javascript, HTML5 and everything is in one file, agemaker.html, available on github:  https://github.com/botanyhelp/Agemakeroffline", 
            "title": "Agemaker age calculating web page."
        }, 
        {
            "location": "/software/r/", 
            "text": "R\n\n\nLearning R programming is best achieved with Robert Kabacoff's R In Action, 2nd Edition.  Garret Grolemund's Hands-On Programming with R is less celebrated but rewards experienced programmers by uncloaking lots of R's strangeness.  Most programmers should be using Rstudio for development especially because it makes learning easier.  Within R, you can do these things (you'll need an internet connection for that first line):\n\n\n\n\ninstall.packages(\"swirl\")\n\n\nlibrary(swirl)\n\n\n\n\nGoing through the swirl tutorial in R provides efficient learning for new and experienced R programmers, especially if you want learning by doing. \n\n\nR is for statistics, you've probably heard, and biostatistics.  The edX online learning platform has an excellent series of courses in R programming, statistics, biology and data analysis.  Learn more at edX and at the book for these courses:\n\n\nhttps://www.edx.org/course/data-analysis-life-sciences-1-statistics-harvardx-ph525-1x\n\n\nhttps://leanpub.com/dataanalysisforthelifesciences\n\n\nIf you drown through these courses you will get some credentials like these to show off to your mom:\n\n\nR biostatistics training", 
            "title": "R"
        }, 
        {
            "location": "/software/r/#r", 
            "text": "Learning R programming is best achieved with Robert Kabacoff's R In Action, 2nd Edition.  Garret Grolemund's Hands-On Programming with R is less celebrated but rewards experienced programmers by uncloaking lots of R's strangeness.  Most programmers should be using Rstudio for development especially because it makes learning easier.  Within R, you can do these things (you'll need an internet connection for that first line):   install.packages(\"swirl\")  library(swirl)   Going through the swirl tutorial in R provides efficient learning for new and experienced R programmers, especially if you want learning by doing.   R is for statistics, you've probably heard, and biostatistics.  The edX online learning platform has an excellent series of courses in R programming, statistics, biology and data analysis.  Learn more at edX and at the book for these courses:  https://www.edx.org/course/data-analysis-life-sciences-1-statistics-harvardx-ph525-1x  https://leanpub.com/dataanalysisforthelifesciences  If you drown through these courses you will get some credentials like these to show off to your mom:  R biostatistics training", 
            "title": "R"
        }, 
        {
            "location": "/software/ruby/", 
            "text": "Ruby\n\n\nRuby and Rails are steep climbs.  They are wonders of elegance and efficiency.  Ruby and rails are in a category with python, linux, git and others among the best software ever created.  The \neasy\n way to learn Ruby is with Hal Fulton's \nThe Ruby Way\n, then Yukihiro Matsumoto's \nThe Ruby Programming Language\n and finally Obie Fernandez's \nThe Rails 4 Way\n.  If you have never programmed before, then I think Jay McGavren's \nHead First Ruby\n should be the first book.  Almost everyone that reads these books will become RoR people.  \n\n\nHerokucarriers\n\n\nRuby on Rails web application with Postgres database backend.  This application is deployable on a local machine using the Rails Webrick http server and a local Postgres database.  The code has the entire application but does not have anything to do with the Postgres database server that it expects is running locally and allowing local connections.  The code does have the capacity to load all of the initial records into the database.  \n\n\nThe code is also ready to be deployed to Heroku.  This application was deployed on Heroku in October 2014 and is running there now at:\n\n\nhttps://aqueous-bayou-3129.herokuapp.com/carriers/\n\n\nAll of the code are open source GPLv3 and on github at:\n\n\nhttps://github.com/botanyhelp/Herokucarriers\n\n\n..all of the data in the application are thankfully provided by wikipedia editors and shared under this license.\n\n\nhttps://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License\n\n\nhttps://creativecommons.org/licenses/by-sa/3.0/us/\n\n\nIt is possible to setup this application on a local linux box as described on the \nHeroku\n and \nPostgres\n pages.\n\n\nQRCode\n\n\nQR codes are those things we see everywhere on ads that let mobile phone/camera users snap to take them to a URL. We want them for Facebase posters.\nThis ruby code creates png formatted images of the QR codes. It also dumps text which can be used to create an HTML/CSS version of the QR code:\n\n\nqrHTMLandPNGmaker.rb\n\n\n\n\nThat ruby doesn't actually dump HTML, only text with and 'x' character for dark and a \"space\" character for light. That text output can be used to create HTML/CSS that displays the QR code as an HTML table. This python program reads the output from the ruby program (the text output) and writes HTML/CSS to generate the QR code:\n\n\nqrHTMLmaker.py\n\n\n\n\nThe ruby requires some modules that are probably not present. Install them with gem like this:\n\n\ngem install rqrcode\ngem install rqrcode_png\n\n\n\n\nNOTICE that the URLs are \nhardcoded into the ruby\n.\nNOTICE that the file qr.txt produced by the ruby is a \nhardcoded input filename\n in the python.\nThe whole thing was run like this:\n\n\nruby qrHTMLandPNGmaker.rb \n rb.txt\npython qrHTMLmaker.py \n qr_codes.html\n\n\n\n\nAfter running the ruby program, six new 300x300 PNG-formatted images will be created in the current directory. The output HTML from the python can be dropped right into any HTML file and will display the QR codes.\n\n\nAvailable on github: \n\nhttps://github.com/botanyhelp/Qrcode", 
            "title": "Ruby"
        }, 
        {
            "location": "/software/ruby/#ruby", 
            "text": "Ruby and Rails are steep climbs.  They are wonders of elegance and efficiency.  Ruby and rails are in a category with python, linux, git and others among the best software ever created.  The  easy  way to learn Ruby is with Hal Fulton's  The Ruby Way , then Yukihiro Matsumoto's  The Ruby Programming Language  and finally Obie Fernandez's  The Rails 4 Way .  If you have never programmed before, then I think Jay McGavren's  Head First Ruby  should be the first book.  Almost everyone that reads these books will become RoR people.", 
            "title": "Ruby"
        }, 
        {
            "location": "/software/ruby/#herokucarriers", 
            "text": "Ruby on Rails web application with Postgres database backend.  This application is deployable on a local machine using the Rails Webrick http server and a local Postgres database.  The code has the entire application but does not have anything to do with the Postgres database server that it expects is running locally and allowing local connections.  The code does have the capacity to load all of the initial records into the database.    The code is also ready to be deployed to Heroku.  This application was deployed on Heroku in October 2014 and is running there now at:  https://aqueous-bayou-3129.herokuapp.com/carriers/  All of the code are open source GPLv3 and on github at:  https://github.com/botanyhelp/Herokucarriers  ..all of the data in the application are thankfully provided by wikipedia editors and shared under this license.  https://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License  https://creativecommons.org/licenses/by-sa/3.0/us/  It is possible to setup this application on a local linux box as described on the  Heroku  and  Postgres  pages.", 
            "title": "Herokucarriers"
        }, 
        {
            "location": "/software/ruby/#qrcode", 
            "text": "QR codes are those things we see everywhere on ads that let mobile phone/camera users snap to take them to a URL. We want them for Facebase posters.\nThis ruby code creates png formatted images of the QR codes. It also dumps text which can be used to create an HTML/CSS version of the QR code:  qrHTMLandPNGmaker.rb  That ruby doesn't actually dump HTML, only text with and 'x' character for dark and a \"space\" character for light. That text output can be used to create HTML/CSS that displays the QR code as an HTML table. This python program reads the output from the ruby program (the text output) and writes HTML/CSS to generate the QR code:  qrHTMLmaker.py  The ruby requires some modules that are probably not present. Install them with gem like this:  gem install rqrcode\ngem install rqrcode_png  NOTICE that the URLs are  hardcoded into the ruby .\nNOTICE that the file qr.txt produced by the ruby is a  hardcoded input filename  in the python.\nThe whole thing was run like this:  ruby qrHTMLandPNGmaker.rb   rb.txt\npython qrHTMLmaker.py   qr_codes.html  After running the ruby program, six new 300x300 PNG-formatted images will be created in the current directory. The output HTML from the python can be dropped right into any HTML file and will display the QR codes.  Available on github:  https://github.com/botanyhelp/Qrcode", 
            "title": "QRCode"
        }, 
        {
            "location": "/software/perl/", 
            "text": "Perl\n\n\nLearning perl is best done with these books, possibly in this order:\n\n\n\n\nLearning Perl, 6th Edition by Randal L. Schwartz, brian d foy, Tom Phoenix\n\n\nIntermediate Perl, 2nd Edition by Randal L. Schwartz, brian d foy, Tom Phoenix\n\n\nLearning Perl Objects, References, and Modules by Randal L. Schwartz, Tom Phoenix\n\n\nPerl Cookbook, 2nd Edition by Tom Christiansen, Nathan Torkington\n\n\nMastering Algorithms with Perl by Jarkko Hietaniemi, John Macdonald, Jon Orwant\n\n\n\n\nHerbperl\n\n\nWisconsin Herbarium on Perl README\n\n\nThe source code Perl .cgi files have inline \ndocumentation of various quality.  Beware of \nout-of-date documentation!  Better to talk \nwith Herbarium personnel when making changes. \nThis code works nearly properly with respect \nto accepted species names and synonyms.  Be \naware that this application is also coded in \na Java \"port\" and a python \"port\".  The Java \nis a servlet (tomcat) application.  The python \nis a Google App Engine application.  The java \nand python versions are experimental.  This \nperl has been running as production for \nseveral years.\n\n\nhttp://www.botany.wisc.edu/wisflora/\n\n\nAvailable on github:\n\n\nhttps://github.com/botanyhelp/Herbperl", 
            "title": "Perl"
        }, 
        {
            "location": "/software/perl/#perl", 
            "text": "Learning perl is best done with these books, possibly in this order:   Learning Perl, 6th Edition by Randal L. Schwartz, brian d foy, Tom Phoenix  Intermediate Perl, 2nd Edition by Randal L. Schwartz, brian d foy, Tom Phoenix  Learning Perl Objects, References, and Modules by Randal L. Schwartz, Tom Phoenix  Perl Cookbook, 2nd Edition by Tom Christiansen, Nathan Torkington  Mastering Algorithms with Perl by Jarkko Hietaniemi, John Macdonald, Jon Orwant", 
            "title": "Perl"
        }, 
        {
            "location": "/software/perl/#herbperl", 
            "text": "Wisconsin Herbarium on Perl README  The source code Perl .cgi files have inline \ndocumentation of various quality.  Beware of \nout-of-date documentation!  Better to talk \nwith Herbarium personnel when making changes. \nThis code works nearly properly with respect \nto accepted species names and synonyms.  Be \naware that this application is also coded in \na Java \"port\" and a python \"port\".  The Java \nis a servlet (tomcat) application.  The python \nis a Google App Engine application.  The java \nand python versions are experimental.  This \nperl has been running as production for \nseveral years.  http://www.botany.wisc.edu/wisflora/  Available on github:  https://github.com/botanyhelp/Herbperl", 
            "title": "Herbperl"
        }, 
        {
            "location": "/software/php/", 
            "text": "Php\n\n\nPHP is best learned \non the web\n and with these books:\n\n\n\n\nPHP Cookbook, 3rd Edition by David Sklar, Adam Trachtenberg\n\n\nPHP: The Good Parts by Peter MacIntyre\n\n\n\n\nLaravelcarriers\n\n\nSimple writable database program runnning on Laravel php web framework. \n\n\nCode available on github:\n\n\nhttps://github.com/botanyhelp/Laravelcarriers\n\n\nLaravel shoves the whole http web server and mysql database server into itself.  All of the github code provides the application and the data.  With a suitable php installation, you can get the whole LAMP thing showing up in your browser here: http://localhost:8000/carriers/\n\n\n..all of the data in the application are thankfully provided by wikipedia editors and shared under this license.\n\n\nhttps://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License\n\n\nhttps://creativecommons.org/licenses/by-sa/3.0/us/\n\n\nZipper\n\n\nzipper.php is a php program that creates zip archives. \n\n\nAvailable on github:\n\n\nhttps://github.com/botanyhelp/Zipper\n\n\nIt requires that the ZipArchive class be available: \nhttp://www.php.net/manual/en/class.ziparchive.php\n\n\n...you'll get a hang or error if it does not.  \n\n\nThe program also hard codes the input files and output zip PATH. \n\n\nYou need to edit those lines or create /tmp/one.txt, /tmp/two.txt, /tmp/three.txt and then look for /tmp/onetwothree.zip\n\n\nModify it to suit your zipping requirements. \n\n\nPhpuploader\n\n\nPHP script to upload files to web server.\n\n\nRequires you to \nalter hardcoded directory paths\n.\nShould password protect so that strangers don't upload and fill your disk. \n\n\nWith PHP setup properly for very large uploads, this program has done it.  It is still running in production to allow nature photographer uploads. \n\n\nAvailable on github:\n\n\nhttps://github.com/botanyhelp/Phpuploader", 
            "title": "Php"
        }, 
        {
            "location": "/software/php/#php", 
            "text": "PHP is best learned  on the web  and with these books:   PHP Cookbook, 3rd Edition by David Sklar, Adam Trachtenberg  PHP: The Good Parts by Peter MacIntyre", 
            "title": "Php"
        }, 
        {
            "location": "/software/php/#laravelcarriers", 
            "text": "Simple writable database program runnning on Laravel php web framework.   Code available on github:  https://github.com/botanyhelp/Laravelcarriers  Laravel shoves the whole http web server and mysql database server into itself.  All of the github code provides the application and the data.  With a suitable php installation, you can get the whole LAMP thing showing up in your browser here: http://localhost:8000/carriers/  ..all of the data in the application are thankfully provided by wikipedia editors and shared under this license.  https://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License  https://creativecommons.org/licenses/by-sa/3.0/us/", 
            "title": "Laravelcarriers"
        }, 
        {
            "location": "/software/php/#zipper", 
            "text": "zipper.php is a php program that creates zip archives.   Available on github:  https://github.com/botanyhelp/Zipper  It requires that the ZipArchive class be available: \nhttp://www.php.net/manual/en/class.ziparchive.php  ...you'll get a hang or error if it does not.    The program also hard codes the input files and output zip PATH.   You need to edit those lines or create /tmp/one.txt, /tmp/two.txt, /tmp/three.txt and then look for /tmp/onetwothree.zip  Modify it to suit your zipping requirements.", 
            "title": "Zipper"
        }, 
        {
            "location": "/software/php/#phpuploader", 
            "text": "PHP script to upload files to web server.  Requires you to  alter hardcoded directory paths .\nShould password protect so that strangers don't upload and fill your disk.   With PHP setup properly for very large uploads, this program has done it.  It is still running in production to allow nature photographer uploads.   Available on github:  https://github.com/botanyhelp/Phpuploader", 
            "title": "Phpuploader"
        }, 
        {
            "location": "/software/content/", 
            "text": "Content\n\n\nCreating content nowadays means the mobile web and isn't getting easier.  These books are good:\n\n\n\n\nMobile HTML5 by Estelle Weyl\n\n\nHead First HTML and CSS, 2nd Edition by Elisabeth Robson, Eric Freeman\n\n\n\n\nCreating content with markdown is easier.  Using markdown you can let software write the HTML, CSS and javascript and create the PDF and MSWord document for you.  Content creation happens sooner and life is better with markdown.  \nMarkdown Cheatsheet\n\n\nMultilingual and left to right HTML\n\n\nThis page should work on every modern web browser.  It displays the hebrew language and instructs the browser to present it using a right-to-left reading orientation which is proper for right to left languages like hebrew.  This is achieved with the dir attribute of the html element.  \n\n\nhtml lang=\nhe\n dir=\nrtl\n\n\n\n\n\nNotice in your browser that it \nselects\n the text using the right to left orientation, not like with English and other left to right languages:\n\n\nhttps://github.com/botanyhelp/Agemakeroffline/blob/master/hebrew.html\n\n\nNotice that the left right to left will only work if you save the file and then look at it in your browser, or if you install the hebrew.html file onto a web server.  You can see online here:\n\n\nhttp://www.pitt.edu/~twm11/hebrew.html\n\n\nThis page, one page of HTML, shows two languages using the lang attribute at the element level:\n\n\nhttps://github.com/botanyhelp/Agemakeroffline/blob/master/russian.html\n\n\nYou can see online here:\n\n\nhttp://www.pitt.edu/~twm11/russian.html\n\n\nThat page sets the lang attribute of an element three times on that page like this:\n\n\ntitle lang=\nru\n\n\np lang=\nru\n\n\np lang=\nen\n\n\n\n\n\nOffline web application: Agemaker age calculating web page.\n\n\nhttp://www.pitt.edu/~twm11/agemaker.html\n\n\nThe application logic is written in Javascript and uses the entered birthdate to calculate the current age to one decimal place.  This application is useful for researchers that wish to record the present age of participants (instead of entering a birthdate and current date).  Sometimes the current age is the desired value.  This web application also has the benefit of being an offline web app.  Therefore, when you revisit this URL later, when you have no Internet connection, it still works (on all modern web browsers).  It also has the benefit of not recording or transmitting any data. \n\n\nThe javascript, HTML5 and everything is in one file, agemaker.html, available on github:\n\n\nhttps://github.com/botanyhelp/Agemakeroffline", 
            "title": "Content"
        }, 
        {
            "location": "/software/content/#content", 
            "text": "Creating content nowadays means the mobile web and isn't getting easier.  These books are good:   Mobile HTML5 by Estelle Weyl  Head First HTML and CSS, 2nd Edition by Elisabeth Robson, Eric Freeman   Creating content with markdown is easier.  Using markdown you can let software write the HTML, CSS and javascript and create the PDF and MSWord document for you.  Content creation happens sooner and life is better with markdown.   Markdown Cheatsheet", 
            "title": "Content"
        }, 
        {
            "location": "/software/content/#multilingual-and-left-to-right-html", 
            "text": "This page should work on every modern web browser.  It displays the hebrew language and instructs the browser to present it using a right-to-left reading orientation which is proper for right to left languages like hebrew.  This is achieved with the dir attribute of the html element.    html lang= he  dir= rtl   Notice in your browser that it  selects  the text using the right to left orientation, not like with English and other left to right languages:  https://github.com/botanyhelp/Agemakeroffline/blob/master/hebrew.html  Notice that the left right to left will only work if you save the file and then look at it in your browser, or if you install the hebrew.html file onto a web server.  You can see online here:  http://www.pitt.edu/~twm11/hebrew.html  This page, one page of HTML, shows two languages using the lang attribute at the element level:  https://github.com/botanyhelp/Agemakeroffline/blob/master/russian.html  You can see online here:  http://www.pitt.edu/~twm11/russian.html  That page sets the lang attribute of an element three times on that page like this:  title lang= ru  p lang= ru  p lang= en", 
            "title": "Multilingual and left to right HTML"
        }, 
        {
            "location": "/software/content/#offline-web-application-agemaker-age-calculating-web-page", 
            "text": "http://www.pitt.edu/~twm11/agemaker.html  The application logic is written in Javascript and uses the entered birthdate to calculate the current age to one decimal place.  This application is useful for researchers that wish to record the present age of participants (instead of entering a birthdate and current date).  Sometimes the current age is the desired value.  This web application also has the benefit of being an offline web app.  Therefore, when you revisit this URL later, when you have no Internet connection, it still works (on all modern web browsers).  It also has the benefit of not recording or transmitting any data.   The javascript, HTML5 and everything is in one file, agemaker.html, available on github:  https://github.com/botanyhelp/Agemakeroffline", 
            "title": "Offline web application: Agemaker age calculating web page."
        }, 
        {
            "location": "/software/c/", 
            "text": "C\n\n\nComputer science departments still primarily teach Java and/or C.  Java and C take five times longer to learn than python and ruby.  Learning C is best done with these books, in this order:\n\n\n\n\nThe C Programming Language 2nd Edition by Brian W. Kernighan and Dennis M. Ritchie\n\n\nMemory as a Programming Concept in C and C++ by Frantisek Franek\n\n\n\n\nOpenMP programming, compilation, execution, benchmarking in C++ on linux\n\n\nSome code is shown below that will exercise multicore machinery.  Here we will show the steps used to compile it on linux and run it and see how much faster the OpenMP library can make it with multiple cores.  \n\n\nWe compile the code in laplace2d-omp1-3.cpp \nshown below\n on linux like this:\n\n\ng++ -fopenmp laplace2d-omp1-3.cpp -o laplace2d-omp1-3\n\n\n\n\nWe run it like this:\n\n\n./laplace2d-omp1-3 \nSolving Laplace equation on 4000-by-4000 mesh.\nUsing 16 thread(s).\nIteration: 1000, error: 0.372606\nIteration count breached. Error: 0.372606\n\n\n\n\nWe use the time command and notice that there are probably 16 cores in this machine because 6 minutes and 12 seconds is 372 seconds.  But it only took 23 seconds to run.  \n372/23 = 16\n:\n\n\ntime ./laplace2d-omp1-3 \n laplace2d-omp1-3.log\nreal    0m23.454s\nuser    6m12.657s\nsys 0m0.079s\n\n\n\n\nWe can see the output from the execution confirms 16 cores:\n\n\ncat laplace2d-omp1-3.log\n\nSolving Laplace equation on 4000-by-4000 mesh.\nUsing 16 thread(s).\nIteration: 1000, error: 0.372606\nIteration count breached. Error: 0.372606\n\n\n\n\nWe can see a nice machine here on linux:\n\n\ncat /proc/cpuinfo |head -25\n\nprocessor   : 0\nvendor_id   : GenuineIntel\ncpu family  : 6\nmodel       : 45\nmodel name  : Intel(R) Xeon(R) CPU E5-2670 0 @ 2.60GHz\nstepping    : 7\ncpu MHz     : 1200.000\ncache size  : 20480 KB\nphysical id : 0\nsiblings    : 8\ncore id     : 0\ncpu cores   : 8\napicid      : 0\ninitial apicid  : 0\nfpu     : yes\nfpu_exception   : yes\ncpuid level : 13\nwp      : yes\nflags       : fpu vme de pse tsc msr pae mce cx8 apic mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good xtopology nonstop_tsc aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm dca sse4_1 sse4_2 x2apic popcnt aes xsave avx lahf_lm ida arat epb xsaveopt pln pts dts tpr_shadow vnmi flexpriority ept vpid\nbogomips    : 5200.05\nclflush size    : 64\ncache_alignment : 64\naddress sizes   : 46 bits physical, 48 bits virtual\npower management:\n\n\n\n\nAnd also count 16 physical cores:\n\n\ncat /proc/cpuinfo |grep processor|wc -l\n16\n\n\n\n\nThanks for sharing whomever.  I wish I knew and could cite whoever wrote this code:\n\n\n/*  \n    Solves the homogeneous (no-source) heat transfer equation\n    using 2nd order central finite difference.\n\n    The Laplace equation:   \\nabla^2 T = 0   in 2D plane\n                                     T = T0  on the plane boundary\n\n    The discretized equation:\n\n       T(i+1,j) + T(i-1,j) - 4*T(i,j) +  T(i,j+1) + T(i,j-1)  = 0   for i=2:M-1, j=2:N-1\n       T(1,j) = 1                                           for j=1:N \n       T(M,j) = T(i,1) = T(i,N) = 0                         for j=1:N and i=1:M\n\n    The above system of M*N unknowns and M*N equations will be solved using \n    Jacobi iteration:\n\n    1. Start with a guess T\n    2. Update Tnew = 1/D ( - R * T)   where D, R are the diagonal and non-diagonal \n       component matrix  corresponding to the linear system above (A = D+R)\n    3. Error = || Tnew - T ||, where we use L-2 norm (rms of update)\n    4. Check if error \n tol, if not go to step-2\n\n*/\n#include \niostream\n\n#include \ncmath\n\n#include \nomp.h\n\nusing namespace std;\n\n// set precision by redefining typedef\ntypedef double real;\n\n\nint main()\n{\n   // Set my simulation parameters\n   const size_t m = 4000;\n   const size_t n = 4000;\n   const int iter_max = 1000;\n\n   const real tol = 1.0e-2;\n   const real rho = 0.25;\n\n   // Allocate\n   real T[m][n];\n   real Tnew[m][n];\n\n   // Echo the conditions\n   cout \n \nSolving Laplace equation on \n \n m \n \n-by-\n \n n \n \n mesh.\\n\n\n        \n \nUsing \n \n omp_get_max_threads() \n \n thread(s).\n \n endl;\n\n   // Set Initial guess as zero everywhere except at the west boundary \n   for( int i=0; i\nm; ++i )\n      for( int j=0; j\nn; ++j )\n      {\n         if ( i == 1 ) T[i][j] = 1;\n         else          T[i][j] = 0;\n      }\n\n\n   // Start the iterations\n   double error = 0; // error is shared/reduced for the parallel region\n   int iter = 0;\n\n   // begin the parallel region\n   #pragma omp parallel\n   {\n   while ( true )\n   {\n      // Reset rms error\n      #pragma omp master\n      error = 0;\n      #pragma omp barrier\n\n      #pragma omp for reduction(+:error)\n      for( int i = 1; i \n m-1; i++ )\n         for( int j = 1; j \n n-1; j++)\n         {\n            //Tnew[i][j] = 0.25 * (T[i+1][j] + T[i-1][j] + T[i][j+1] + T[i][j-1]);\n            //121412-dontcopy\n            //Tnew[i][j] = 0.25 * (T[i+1][j] + T[i-1][j] + T[i][j+1] + T[i][j-1]);\n            //T[i][j] = 0.25 * (Tnew[i+1][j] + Tnew[i-1][j] + Tnew[i][j+1] + Tnew[i][j-1]);\n            T[i][j] = 0.25 * (T[i+1][j] + T[i-1][j] + T[i][j+1] + T[i][j-1]);\n            double errij = Tnew[i][j] - T[i][j];\n            error += errij * errij;\n         }\n      // normalize rms error\n      #pragma omp single\n      error = sqrt(error);\n\n      // Check for stopping condition\n      if ( error \n tol ) {\n         #pragma omp master\n         cout \n \n\\nTolerance satisfied. Error: \n \n error \n \n\\n\n;\n\n         break;\n      }\n      else if ( iter \n iter_max )\n      {\n         #pragma omp master\n         cout \n \n\\nIteration count breached. Error: \n \n error \n \n\\n\n;\n\n         break;\n      }\n\n      // Update guess for next iteration\n      #pragma omp for\n      for( int i = 1; i \n m-1; i++ )\n         for( int j = 1; j \n n-1; j++)\n            T[i][j] = Tnew[i][j];\n\n      // display progress every so iterations\n      #pragma omp master\n      {\n      if ( iter % 10 == 0 ) \n         cout \n \n\\rIteration: \n \n iter \n \n, error: \n \n error \n flush;\n\n      // go to next iteration\n      iter++;\n      }\n   }\n   } // end parallel region\n   // done\n   return 0;\n}", 
            "title": "C"
        }, 
        {
            "location": "/software/c/#c", 
            "text": "Computer science departments still primarily teach Java and/or C.  Java and C take five times longer to learn than python and ruby.  Learning C is best done with these books, in this order:   The C Programming Language 2nd Edition by Brian W. Kernighan and Dennis M. Ritchie  Memory as a Programming Concept in C and C++ by Frantisek Franek", 
            "title": "C"
        }, 
        {
            "location": "/software/c/#openmp-programming-compilation-execution-benchmarking-in-c-on-linux", 
            "text": "Some code is shown below that will exercise multicore machinery.  Here we will show the steps used to compile it on linux and run it and see how much faster the OpenMP library can make it with multiple cores.    We compile the code in laplace2d-omp1-3.cpp  shown below  on linux like this:  g++ -fopenmp laplace2d-omp1-3.cpp -o laplace2d-omp1-3  We run it like this:  ./laplace2d-omp1-3 \nSolving Laplace equation on 4000-by-4000 mesh.\nUsing 16 thread(s).\nIteration: 1000, error: 0.372606\nIteration count breached. Error: 0.372606  We use the time command and notice that there are probably 16 cores in this machine because 6 minutes and 12 seconds is 372 seconds.  But it only took 23 seconds to run.   372/23 = 16 :  time ./laplace2d-omp1-3   laplace2d-omp1-3.log\nreal    0m23.454s\nuser    6m12.657s\nsys 0m0.079s  We can see the output from the execution confirms 16 cores:  cat laplace2d-omp1-3.log\n\nSolving Laplace equation on 4000-by-4000 mesh.\nUsing 16 thread(s).\nIteration: 1000, error: 0.372606\nIteration count breached. Error: 0.372606  We can see a nice machine here on linux:  cat /proc/cpuinfo |head -25\n\nprocessor   : 0\nvendor_id   : GenuineIntel\ncpu family  : 6\nmodel       : 45\nmodel name  : Intel(R) Xeon(R) CPU E5-2670 0 @ 2.60GHz\nstepping    : 7\ncpu MHz     : 1200.000\ncache size  : 20480 KB\nphysical id : 0\nsiblings    : 8\ncore id     : 0\ncpu cores   : 8\napicid      : 0\ninitial apicid  : 0\nfpu     : yes\nfpu_exception   : yes\ncpuid level : 13\nwp      : yes\nflags       : fpu vme de pse tsc msr pae mce cx8 apic mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good xtopology nonstop_tsc aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm dca sse4_1 sse4_2 x2apic popcnt aes xsave avx lahf_lm ida arat epb xsaveopt pln pts dts tpr_shadow vnmi flexpriority ept vpid\nbogomips    : 5200.05\nclflush size    : 64\ncache_alignment : 64\naddress sizes   : 46 bits physical, 48 bits virtual\npower management:  And also count 16 physical cores:  cat /proc/cpuinfo |grep processor|wc -l\n16  Thanks for sharing whomever.  I wish I knew and could cite whoever wrote this code:  /*  \n    Solves the homogeneous (no-source) heat transfer equation\n    using 2nd order central finite difference.\n\n    The Laplace equation:   \\nabla^2 T = 0   in 2D plane\n                                     T = T0  on the plane boundary\n\n    The discretized equation:\n\n       T(i+1,j) + T(i-1,j) - 4*T(i,j) +  T(i,j+1) + T(i,j-1)  = 0   for i=2:M-1, j=2:N-1\n       T(1,j) = 1                                           for j=1:N \n       T(M,j) = T(i,1) = T(i,N) = 0                         for j=1:N and i=1:M\n\n    The above system of M*N unknowns and M*N equations will be solved using \n    Jacobi iteration:\n\n    1. Start with a guess T\n    2. Update Tnew = 1/D ( - R * T)   where D, R are the diagonal and non-diagonal \n       component matrix  corresponding to the linear system above (A = D+R)\n    3. Error = || Tnew - T ||, where we use L-2 norm (rms of update)\n    4. Check if error   tol, if not go to step-2\n\n*/\n#include  iostream \n#include  cmath \n#include  omp.h \nusing namespace std;\n\n// set precision by redefining typedef\ntypedef double real;\n\n\nint main()\n{\n   // Set my simulation parameters\n   const size_t m = 4000;\n   const size_t n = 4000;\n   const int iter_max = 1000;\n\n   const real tol = 1.0e-2;\n   const real rho = 0.25;\n\n   // Allocate\n   real T[m][n];\n   real Tnew[m][n];\n\n   // Echo the conditions\n   cout    Solving Laplace equation on     m    -by-    n     mesh.\\n \n           Using     omp_get_max_threads()     thread(s).    endl;\n\n   // Set Initial guess as zero everywhere except at the west boundary \n   for( int i=0; i m; ++i )\n      for( int j=0; j n; ++j )\n      {\n         if ( i == 1 ) T[i][j] = 1;\n         else          T[i][j] = 0;\n      }\n\n\n   // Start the iterations\n   double error = 0; // error is shared/reduced for the parallel region\n   int iter = 0;\n\n   // begin the parallel region\n   #pragma omp parallel\n   {\n   while ( true )\n   {\n      // Reset rms error\n      #pragma omp master\n      error = 0;\n      #pragma omp barrier\n\n      #pragma omp for reduction(+:error)\n      for( int i = 1; i   m-1; i++ )\n         for( int j = 1; j   n-1; j++)\n         {\n            //Tnew[i][j] = 0.25 * (T[i+1][j] + T[i-1][j] + T[i][j+1] + T[i][j-1]);\n            //121412-dontcopy\n            //Tnew[i][j] = 0.25 * (T[i+1][j] + T[i-1][j] + T[i][j+1] + T[i][j-1]);\n            //T[i][j] = 0.25 * (Tnew[i+1][j] + Tnew[i-1][j] + Tnew[i][j+1] + Tnew[i][j-1]);\n            T[i][j] = 0.25 * (T[i+1][j] + T[i-1][j] + T[i][j+1] + T[i][j-1]);\n            double errij = Tnew[i][j] - T[i][j];\n            error += errij * errij;\n         }\n      // normalize rms error\n      #pragma omp single\n      error = sqrt(error);\n\n      // Check for stopping condition\n      if ( error   tol ) {\n         #pragma omp master\n         cout    \\nTolerance satisfied. Error:     error    \\n ;\n\n         break;\n      }\n      else if ( iter   iter_max )\n      {\n         #pragma omp master\n         cout    \\nIteration count breached. Error:     error    \\n ;\n\n         break;\n      }\n\n      // Update guess for next iteration\n      #pragma omp for\n      for( int i = 1; i   m-1; i++ )\n         for( int j = 1; j   n-1; j++)\n            T[i][j] = Tnew[i][j];\n\n      // display progress every so iterations\n      #pragma omp master\n      {\n      if ( iter % 10 == 0 ) \n         cout    \\rIteration:     iter    , error:     error   flush;\n\n      // go to next iteration\n      iter++;\n      }\n   }\n   } // end parallel region\n   // done\n   return 0;\n}", 
            "title": "OpenMP programming, compilation, execution, benchmarking in C++ on linux"
        }, 
        {
            "location": "/software/ios/", 
            "text": "Ios\n\n\nLearning objective-c, swift and iOS should be done with the latest books by Matt Neuburg.  The Apple documentation is good, and should be close at hand, but its not close to the quality and efficiency found in the Neuburg books.  Nowadays swift is the place to start and the place to be for all of Apple system programming.  If you already know \nC\n, then the fastest way to learn is to read these books in this order, for objective-c or swift:\n\n\nObjective-C\n\n\n\n\niOS 7 Programming Fundamentals by Matt Neuburg\n\n\nProgramming iOS 7, 4th Edition by Matt Neuburg\n\n\n\n\nSwift\n\n\n\n\niOS 9 Programming Fundamentals with Swift by Matt Neuburg (Oreilly has a free sampler of Chapter 1, \"The Architecture of Swift\", where you can get a feel for the Neuburg way).\n\n\nProgramming iOS 9 by Matt Neuburg\n\n\n\n\nBecause Apple's XCode is central to iOS programming, and because its a rather visual system, the Head First book can help because it shows how your GUI ought to look and what you ought to click/drag/etc.: \n\n\n\n\nHead First iPhone and iPad Development, 3rd Edition by Dan Pilone, Tracey Pilone\n\n\n\n\nThat 3rd edition is objective-c based and hopefully a 4th edition for swift will be here soon. \n\n\niOS7 Objective-C iPhone App Nuclides\n\n\nThe \nNuclides iPhone App\n was constructed using Objective-C in xCode using iOS7 as it was during construction, circa February 2014.  This application behaves very similarly to the \nNuclides Android app\n available on Google Play.  The Nuclides iPhone App is not available on the Apple App Store.  The source code of the application is available on github at:\n\n\ngithub.com/botanyhelp/Nuclides_ios_objc\n\n\nThere is also a project page with dozens of screenshots of xCode operations during construction at:\n\n\nbotanyhelp.github.io/Nuclides_ios_objc\n\n\niOS7 Objective-C iPhone App Deadtapes\n\n\nDeadtapes is available on the Apple App Store:\n\n\nhttps://itunes.apple.com/us/app/deadtapes/id838487529?mt=8\n\n\nIt works very similarly to the Deadshowfinder Android app on the \n/software/android.md\n page.  They help you find out exactly which show your tape was made from.", 
            "title": "Ios"
        }, 
        {
            "location": "/software/ios/#ios", 
            "text": "Learning objective-c, swift and iOS should be done with the latest books by Matt Neuburg.  The Apple documentation is good, and should be close at hand, but its not close to the quality and efficiency found in the Neuburg books.  Nowadays swift is the place to start and the place to be for all of Apple system programming.  If you already know  C , then the fastest way to learn is to read these books in this order, for objective-c or swift:  Objective-C   iOS 7 Programming Fundamentals by Matt Neuburg  Programming iOS 7, 4th Edition by Matt Neuburg   Swift   iOS 9 Programming Fundamentals with Swift by Matt Neuburg (Oreilly has a free sampler of Chapter 1, \"The Architecture of Swift\", where you can get a feel for the Neuburg way).  Programming iOS 9 by Matt Neuburg   Because Apple's XCode is central to iOS programming, and because its a rather visual system, the Head First book can help because it shows how your GUI ought to look and what you ought to click/drag/etc.:    Head First iPhone and iPad Development, 3rd Edition by Dan Pilone, Tracey Pilone   That 3rd edition is objective-c based and hopefully a 4th edition for swift will be here soon.", 
            "title": "Ios"
        }, 
        {
            "location": "/software/ios/#ios7-objective-c-iphone-app-nuclides", 
            "text": "The  Nuclides iPhone App  was constructed using Objective-C in xCode using iOS7 as it was during construction, circa February 2014.  This application behaves very similarly to the  Nuclides Android app  available on Google Play.  The Nuclides iPhone App is not available on the Apple App Store.  The source code of the application is available on github at:  github.com/botanyhelp/Nuclides_ios_objc  There is also a project page with dozens of screenshots of xCode operations during construction at:  botanyhelp.github.io/Nuclides_ios_objc", 
            "title": "iOS7 Objective-C iPhone App Nuclides"
        }, 
        {
            "location": "/software/ios/#ios7-objective-c-iphone-app-deadtapes", 
            "text": "Deadtapes is available on the Apple App Store:  https://itunes.apple.com/us/app/deadtapes/id838487529?mt=8  It works very similarly to the Deadshowfinder Android app on the  /software/android.md  page.  They help you find out exactly which show your tape was made from.", 
            "title": "iOS7 Objective-C iPhone App Deadtapes"
        }, 
        {
            "location": "/databases/mysql/", 
            "text": "Mysql\n\n\nLearning MySQL is fun and easy, especially with these books:\n\n\n\n\nLearning MySQL by Seyed M.M. Tahaghoghi, Hugh E. Williams\n\n\nMySQL Cookbook, 3rd Edition by Paul DuBois\n\n\n\n\nLearning SQL is required, fun and easy, especially with these books:\n\n\n\n\nLearning SQL, 2nd Edition by Alan Beaulieu\n\n\nHead First SQL by Lynn Beighley\n\n\n\n\nNowadays everyone seems to know that SQL is dead and NoSQL is the future.  Many of the NoSQL technologies are great, some are rather ugly, but all of them seem to confirm that the relational model is here to stay. \n\n\nMySQL serves up alot of specimens at \nhttp://www.botany.wisc.edu/wisflora/\n\n\nMySQL is good enough for the \nsecond best website\n on the Internet.  Easy, open source, powerful, SQL.  It might be good enough for you.", 
            "title": "Mysql"
        }, 
        {
            "location": "/databases/mysql/#mysql", 
            "text": "Learning MySQL is fun and easy, especially with these books:   Learning MySQL by Seyed M.M. Tahaghoghi, Hugh E. Williams  MySQL Cookbook, 3rd Edition by Paul DuBois   Learning SQL is required, fun and easy, especially with these books:   Learning SQL, 2nd Edition by Alan Beaulieu  Head First SQL by Lynn Beighley   Nowadays everyone seems to know that SQL is dead and NoSQL is the future.  Many of the NoSQL technologies are great, some are rather ugly, but all of them seem to confirm that the relational model is here to stay.   MySQL serves up alot of specimens at  http://www.botany.wisc.edu/wisflora/  MySQL is good enough for the  second best website  on the Internet.  Easy, open source, powerful, SQL.  It might be good enough for you.", 
            "title": "Mysql"
        }, 
        {
            "location": "/databases/postgres/", 
            "text": "Postgres\n\n\nLearning and running PostgreSQL is rather more painful than MySQL.  Opportunities to run PostgreSQL seem to be increasing.  Some of those opportunities are the \nmust use PostgreSQL\n kind.  For exampple, setting up and running \nOpenclinica\n is done with Postgres.  The (free) persistent database running at \nHeroku\n is Postgres and so you'll need to run one yourself when developing a database backed application that is going to run on Heroku.  The best books for learning PostgreSQL are:\n\n\n\n\nPostgreSQL: Up and Running, 2nd Edition by Regina O. Obe, Leo S. Hsu\n\n\nPractical PostgreSQL by Joshua D. Drake, John C. Worsley\n\n\n\n\nPractical PostgreSQL is old but still useful as a reference. \n\n\nOpenclinica, mentioned above, is a very powerful open source clinical research application.  Administrators with linux and LAMP experience will find its documentation to be excellent.  Setting up OpenClinica using the online documentation is not too difficult and will step through the operations of setting up an enterprise Postgres application server.  This is a good way to learn about Postgres and can be done in a few days.  \n\n\nSimple postgres database for Rails application\n\n\nHere we describe how to setup Postgres on CentOS so that it can support the \nHeroku\n application when running locally on linux.  You will want to set your RoR and Postgres application on a local linux box before trying to send it off to run on Heroku.\n\n\nRuby on Rails takes care of most of the Postgres administration for you because you describe your database in the application.  For the \nHeroku\n application mentioned above, the \nschema.db\n file will have the table setup the way the application expects.  The ruby also tells the database name in \ndatabase.yml\n.  Start by installing postgres, perhaps like this on CentOS6:\n\n\nyum --enablerepo=pgdg93 install postgresql93-server postgresql93-contrib\nservice postgresql-9.3 initdb\nchkconfig postgresql-9.3 on\nservice postgresql-9.3 start\n\n\n\n\nThen read \nwiki.postgresql.org/wiki/First_steps\n and do it.  \n\n\n\n\nCreate a Postgres user 'joe' and password 'joepass'\n\n\nCreate a schema named 'carriers'\n\n\nGrant all permissions on all tables in schema 'carriers' to user 'joe'\n\n\n\n\n# su - postgres\n$ psql \npsql (8.4.20, server 9.3.5)\nWARNING: psql version 8.4, server version 9.3.\n         Some psql features might not work.\nType \nhelp\n for help.\n\npostgres=# CREATE SCHEMA test;\nCREATE SCHEMA\npostgres=# CREATE USER joe PASSWORD 'joepass';\nCREATE ROLE\npostgres=# GRANT ALL ON SCHEMA test TO joe;\nGRANT\npostgres=# GRANT ALL ON ALL TABLES IN SCHEMA test TO joe;\nGRANT\npostgres=# CREATE SCHEMA carriers;\nCREATE SCHEMA\npostgres=# GRANT ALL ON SCHEMA carriers TO joe;\nGRANT\npostgres=# GRANT ALL ON ALL TABLES IN SCHEMA carriers TO joe;\nGRANT\npostgres=# \\q\n-bash-4.1$ exit\nlogout\n\n\n\n\nBecause our rails server wants to connect to the local postgres server, we want to make it so that this postgres server trusts all local connectors.  Continuing with our CentOS6 linux, make that trust happen with these lines in this file:\n\n\ncat /var/lib/pgsql/9.3/data/pg_hba.conf|egrep -v \n^#\n\n\nlocal   all             all                                     trust\nhost    all             all             127.0.0.1/32            trust\nhost    all             all             ::1/128                 trust\n\n\n\n\nWe become user \npostgres\n to do the postgres things (because root cannot do them) and restart the server like this:\n\n\n/usr/pgsql-9.3/bin/pg_ctl reload -D /var/lib/pgsql/9.3/data/\n\n\n\n\nWe also start the rails application as this user.  This isn't necessary because we allowed all local connections in \npg_hba.conf\n above.  Even so, rails and postgres are both running as user postgres.  Rails will start the server with the WEBrick http server and we choose port 3002:\n\n\n-bash-3.2$ rails server -p 3002\n/usr/local/rvm/rubies/ruby-1.9.3-p547/lib/ruby/1.9.1/yaml.rb:84:in `\ntop (required)\n':\nIt seems your ruby installation is missing psych (for YAML output).\nTo eliminate this warning, please install libyaml and reinstall your ruby.\n=\n Booting WEBrick\n=\n Rails 4.1.6 application starting in development on http://0.0.0.0:3002\n=\n Run `rails server -h` for more startup options\n=\n Notice: server is listening on all interfaces (0.0.0.0). Consider using 127.0.0.1 (--binding option)\n=\n Ctrl-C to shutdown server\n[2016-03-23 14:01:53] INFO  WEBrick 1.3.1\n[2016-03-23 14:01:53] INFO  ruby 1.9.3 (2014-05-14) [x86_64-linux]\n[2016-03-23 14:01:53] INFO  WEBrick::HTTPServer#start: pid=25061 port=3002\n\n\n\n\nAt this point, a web browser can find the home page at http://127.0.0.1:3002/carriers/.  This application can now populate the database with records.  We can hit Control-C to stop rails.  Then we can connect to the database with psql and see the new records.  Notice in psql that we must connect to the correct \"relation\" first.  In rails, according to database.yml, we were populating carriers_dev, where we see there are 27 Japanese_aircraft_carrier.  We also see that there are 0 in our production database:\n\n\nExiting\n-bash-3.2$ pwd\n/usr/local/carriers\n-bash-3.2$ psql\npsql (9.3.5)\nType \nhelp\n for help.\n\npostgres=# select * from carriers WHERE carriername LIKE 'Japanese_aircraft_carrier%';ERROR:  relation \ncarriers\n does not exist\nLINE 1: select * from carriers WHERE carriername LIKE 'Japanese_airc...\n                      ^\npostgres=# \\c carriers_dev\nYou are now connected to database \ncarriers_dev\n as user \npostgres\n.\n\ncarriers_dev=# select count(*) from carriers WHERE carriername LIKE 'Japanese_aircraft_carrier%';\n count \n-------\n    27\n(1 row)\n\ncarriers_dev=# \\c carriers\nYou are now connected to database \ncarriers\n as user \npostgres\n.\ncarriers=# select count(*) from carriers WHERE carriername LIKE 'Japanese_aircraft_carrier%';\n count \n-------\n     0\n(1 row)\n\ncarriers=# \\q", 
            "title": "Postgres"
        }, 
        {
            "location": "/databases/postgres/#postgres", 
            "text": "Learning and running PostgreSQL is rather more painful than MySQL.  Opportunities to run PostgreSQL seem to be increasing.  Some of those opportunities are the  must use PostgreSQL  kind.  For exampple, setting up and running  Openclinica  is done with Postgres.  The (free) persistent database running at  Heroku  is Postgres and so you'll need to run one yourself when developing a database backed application that is going to run on Heroku.  The best books for learning PostgreSQL are:   PostgreSQL: Up and Running, 2nd Edition by Regina O. Obe, Leo S. Hsu  Practical PostgreSQL by Joshua D. Drake, John C. Worsley   Practical PostgreSQL is old but still useful as a reference.   Openclinica, mentioned above, is a very powerful open source clinical research application.  Administrators with linux and LAMP experience will find its documentation to be excellent.  Setting up OpenClinica using the online documentation is not too difficult and will step through the operations of setting up an enterprise Postgres application server.  This is a good way to learn about Postgres and can be done in a few days.", 
            "title": "Postgres"
        }, 
        {
            "location": "/databases/postgres/#simple-postgres-database-for-rails-application", 
            "text": "Here we describe how to setup Postgres on CentOS so that it can support the  Heroku  application when running locally on linux.  You will want to set your RoR and Postgres application on a local linux box before trying to send it off to run on Heroku.  Ruby on Rails takes care of most of the Postgres administration for you because you describe your database in the application.  For the  Heroku  application mentioned above, the  schema.db  file will have the table setup the way the application expects.  The ruby also tells the database name in  database.yml .  Start by installing postgres, perhaps like this on CentOS6:  yum --enablerepo=pgdg93 install postgresql93-server postgresql93-contrib\nservice postgresql-9.3 initdb\nchkconfig postgresql-9.3 on\nservice postgresql-9.3 start  Then read  wiki.postgresql.org/wiki/First_steps  and do it.     Create a Postgres user 'joe' and password 'joepass'  Create a schema named 'carriers'  Grant all permissions on all tables in schema 'carriers' to user 'joe'   # su - postgres\n$ psql \npsql (8.4.20, server 9.3.5)\nWARNING: psql version 8.4, server version 9.3.\n         Some psql features might not work.\nType  help  for help.\n\npostgres=# CREATE SCHEMA test;\nCREATE SCHEMA\npostgres=# CREATE USER joe PASSWORD 'joepass';\nCREATE ROLE\npostgres=# GRANT ALL ON SCHEMA test TO joe;\nGRANT\npostgres=# GRANT ALL ON ALL TABLES IN SCHEMA test TO joe;\nGRANT\npostgres=# CREATE SCHEMA carriers;\nCREATE SCHEMA\npostgres=# GRANT ALL ON SCHEMA carriers TO joe;\nGRANT\npostgres=# GRANT ALL ON ALL TABLES IN SCHEMA carriers TO joe;\nGRANT\npostgres=# \\q\n-bash-4.1$ exit\nlogout  Because our rails server wants to connect to the local postgres server, we want to make it so that this postgres server trusts all local connectors.  Continuing with our CentOS6 linux, make that trust happen with these lines in this file:  cat /var/lib/pgsql/9.3/data/pg_hba.conf|egrep -v  ^# \n\nlocal   all             all                                     trust\nhost    all             all             127.0.0.1/32            trust\nhost    all             all             ::1/128                 trust  We become user  postgres  to do the postgres things (because root cannot do them) and restart the server like this:  /usr/pgsql-9.3/bin/pg_ctl reload -D /var/lib/pgsql/9.3/data/  We also start the rails application as this user.  This isn't necessary because we allowed all local connections in  pg_hba.conf  above.  Even so, rails and postgres are both running as user postgres.  Rails will start the server with the WEBrick http server and we choose port 3002:  -bash-3.2$ rails server -p 3002\n/usr/local/rvm/rubies/ruby-1.9.3-p547/lib/ruby/1.9.1/yaml.rb:84:in ` top (required) ':\nIt seems your ruby installation is missing psych (for YAML output).\nTo eliminate this warning, please install libyaml and reinstall your ruby.\n=  Booting WEBrick\n=  Rails 4.1.6 application starting in development on http://0.0.0.0:3002\n=  Run `rails server -h` for more startup options\n=  Notice: server is listening on all interfaces (0.0.0.0). Consider using 127.0.0.1 (--binding option)\n=  Ctrl-C to shutdown server\n[2016-03-23 14:01:53] INFO  WEBrick 1.3.1\n[2016-03-23 14:01:53] INFO  ruby 1.9.3 (2014-05-14) [x86_64-linux]\n[2016-03-23 14:01:53] INFO  WEBrick::HTTPServer#start: pid=25061 port=3002  At this point, a web browser can find the home page at http://127.0.0.1:3002/carriers/.  This application can now populate the database with records.  We can hit Control-C to stop rails.  Then we can connect to the database with psql and see the new records.  Notice in psql that we must connect to the correct \"relation\" first.  In rails, according to database.yml, we were populating carriers_dev, where we see there are 27 Japanese_aircraft_carrier.  We also see that there are 0 in our production database:  Exiting\n-bash-3.2$ pwd\n/usr/local/carriers\n-bash-3.2$ psql\npsql (9.3.5)\nType  help  for help.\n\npostgres=# select * from carriers WHERE carriername LIKE 'Japanese_aircraft_carrier%';ERROR:  relation  carriers  does not exist\nLINE 1: select * from carriers WHERE carriername LIKE 'Japanese_airc...\n                      ^\npostgres=# \\c carriers_dev\nYou are now connected to database  carriers_dev  as user  postgres .\n\ncarriers_dev=# select count(*) from carriers WHERE carriername LIKE 'Japanese_aircraft_carrier%';\n count \n-------\n    27\n(1 row)\n\ncarriers_dev=# \\c carriers\nYou are now connected to database  carriers  as user  postgres .\ncarriers=# select count(*) from carriers WHERE carriername LIKE 'Japanese_aircraft_carrier%';\n count \n-------\n     0\n(1 row)\n\ncarriers=# \\q", 
            "title": "Simple postgres database for Rails application"
        }, 
        {
            "location": "/databases/sqlite/", 
            "text": "Sqlite\n\n\nUsing SQLite by Jay A. Kreibich is the best SQLite book.  The most under-appreciated way to learn about sqlite is in sqlite itself by typing \n.help\n at the sqlite command line.  \n\n\nI will do that for you right here:\n\n\n$ sqlite3 \nSQLite version 3.6.20\nEnter \n.help\n for instructions\nEnter SQL statements terminated with a \n;\n\nsqlite\n .help\n.backup ?DB? FILE      Backup DB (default \nmain\n) to FILE\n.bail ON|OFF           Stop after hitting an error.  Default OFF\n.databases             List names and files of attached databases\n.dump ?TABLE? ...      Dump the database in an SQL text format\n                         If TABLE specified, only dump tables matching\n                         LIKE pattern TABLE.\n.echo ON|OFF           Turn command echo on or off\n.exit                  Exit this program\n.explain ON|OFF        Turn output mode suitable for EXPLAIN on or off.\n.genfkey ?OPTIONS?     Options are:\n                         --no-drop: Do not drop old fkey triggers.\n                         --ignore-errors: Ignore tables with fkey errors\n                         --exec: Execute generated SQL immediately\n                       See file tool/genfkey.README in the source \n                       distribution for further information.\n.header(s) ON|OFF      Turn display of headers on or off\n.help                  Show this message\n.import FILE TABLE     Import data from FILE into TABLE\n.indices ?TABLE?       Show names of all indices\n                         If TABLE specified, only show indices for tables\n                         matching LIKE pattern TABLE.\n.load FILE ?ENTRY?     Load an extension library\n.mode MODE ?TABLE?     Set output mode where MODE is one of:\n                         csv      Comma-separated values\n                         column   Left-aligned columns.  (See .width)\n                         html     HTML \ntable\n code\n                         insert   SQL insert statements for TABLE\n                         line     One value per line\n                         list     Values delimited by .separator string\n                         tabs     Tab-separated values\n                         tcl      TCL list elements\n.nullvalue STRING      Print STRING in place of NULL values\n.output FILENAME       Send output to FILENAME\n.output stdout         Send output to the screen\n.prompt MAIN CONTINUE  Replace the standard prompts\n.quit                  Exit this program\n.read FILENAME         Execute SQL in FILENAME\n.restore ?DB? FILE     Restore content of DB (default \nmain\n) from FILE\n.schema ?TABLE?        Show the CREATE statements\n                         If TABLE specified, only show tables matching\n                         LIKE pattern TABLE.\n.separator STRING      Change separator used by output mode and .import\n.show                  Show the current values for various settings\n.tables ?TABLE?        List names of tables\n                         If TABLE specified, only list tables matching\n                         LIKE pattern TABLE.\n.timeout MS            Try opening locked tables for MS milliseconds\n.width NUM NUM ...     Set column widths for \ncolumn\n mode\n.timer ON|OFF          Turn the CPU timer measurement on or off\nsqlite\n\n\n\n\n\nYou are welcome.\n\n\nThe \nFighterjets\n android application contains an sqlite3 database that has all of the fighter jet data inside of it.  That database was created with this sqlite creation SQL:\n\n\nCREATE TABLE fighter (name text default null, country text default null, firstyear text default null, number text default null, status text default null, info text default null);\n\n.read fighter.sql\n\nCREATE INDEX idxname  ON  fighter(name);\nCREATE INDEX idxcountry  ON  fighter(country);\nCREATE INDEX idxfirstyear  ON  fighter(firstyear);\nCREATE INDEX idxnumber  ON  fighter(number);\nCREATE INDEX idxstatus  ON  fighter(status);\nCREATE INDEX idxinfo ON  fighter(info);\n\n\n\n\nThere is one table, named fighter, with 6 columns.  The sqlite command \n.read\n then consumes a bunch of \nINSERT\n SQL statements that fill the fighter table.  Then we create an index for every column.  Because this database is read only, those indexes will only speed things up by making the \nSELECT\n queries much faster. \n\n\nA small INSERT statement (and a sad one) found in fighter.sql is this one:\n\n\nINSERT INTO fighter (name,country,firstyear,number,status,info) VALUES ('Albree Pigeon-Fraser Pursuit', 'United States', '1917', '3', 'Abandoned','');", 
            "title": "Sqlite"
        }, 
        {
            "location": "/databases/sqlite/#sqlite", 
            "text": "Using SQLite by Jay A. Kreibich is the best SQLite book.  The most under-appreciated way to learn about sqlite is in sqlite itself by typing  .help  at the sqlite command line.    I will do that for you right here:  $ sqlite3 \nSQLite version 3.6.20\nEnter  .help  for instructions\nEnter SQL statements terminated with a  ; \nsqlite  .help\n.backup ?DB? FILE      Backup DB (default  main ) to FILE\n.bail ON|OFF           Stop after hitting an error.  Default OFF\n.databases             List names and files of attached databases\n.dump ?TABLE? ...      Dump the database in an SQL text format\n                         If TABLE specified, only dump tables matching\n                         LIKE pattern TABLE.\n.echo ON|OFF           Turn command echo on or off\n.exit                  Exit this program\n.explain ON|OFF        Turn output mode suitable for EXPLAIN on or off.\n.genfkey ?OPTIONS?     Options are:\n                         --no-drop: Do not drop old fkey triggers.\n                         --ignore-errors: Ignore tables with fkey errors\n                         --exec: Execute generated SQL immediately\n                       See file tool/genfkey.README in the source \n                       distribution for further information.\n.header(s) ON|OFF      Turn display of headers on or off\n.help                  Show this message\n.import FILE TABLE     Import data from FILE into TABLE\n.indices ?TABLE?       Show names of all indices\n                         If TABLE specified, only show indices for tables\n                         matching LIKE pattern TABLE.\n.load FILE ?ENTRY?     Load an extension library\n.mode MODE ?TABLE?     Set output mode where MODE is one of:\n                         csv      Comma-separated values\n                         column   Left-aligned columns.  (See .width)\n                         html     HTML  table  code\n                         insert   SQL insert statements for TABLE\n                         line     One value per line\n                         list     Values delimited by .separator string\n                         tabs     Tab-separated values\n                         tcl      TCL list elements\n.nullvalue STRING      Print STRING in place of NULL values\n.output FILENAME       Send output to FILENAME\n.output stdout         Send output to the screen\n.prompt MAIN CONTINUE  Replace the standard prompts\n.quit                  Exit this program\n.read FILENAME         Execute SQL in FILENAME\n.restore ?DB? FILE     Restore content of DB (default  main ) from FILE\n.schema ?TABLE?        Show the CREATE statements\n                         If TABLE specified, only show tables matching\n                         LIKE pattern TABLE.\n.separator STRING      Change separator used by output mode and .import\n.show                  Show the current values for various settings\n.tables ?TABLE?        List names of tables\n                         If TABLE specified, only list tables matching\n                         LIKE pattern TABLE.\n.timeout MS            Try opening locked tables for MS milliseconds\n.width NUM NUM ...     Set column widths for  column  mode\n.timer ON|OFF          Turn the CPU timer measurement on or off\nsqlite   You are welcome.  The  Fighterjets  android application contains an sqlite3 database that has all of the fighter jet data inside of it.  That database was created with this sqlite creation SQL:  CREATE TABLE fighter (name text default null, country text default null, firstyear text default null, number text default null, status text default null, info text default null);\n\n.read fighter.sql\n\nCREATE INDEX idxname  ON  fighter(name);\nCREATE INDEX idxcountry  ON  fighter(country);\nCREATE INDEX idxfirstyear  ON  fighter(firstyear);\nCREATE INDEX idxnumber  ON  fighter(number);\nCREATE INDEX idxstatus  ON  fighter(status);\nCREATE INDEX idxinfo ON  fighter(info);  There is one table, named fighter, with 6 columns.  The sqlite command  .read  then consumes a bunch of  INSERT  SQL statements that fill the fighter table.  Then we create an index for every column.  Because this database is read only, those indexes will only speed things up by making the  SELECT  queries much faster.   A small INSERT statement (and a sad one) found in fighter.sql is this one:  INSERT INTO fighter (name,country,firstyear,number,status,info) VALUES ('Albree Pigeon-Fraser Pursuit', 'United States', '1917', '3', 'Abandoned','');", 
            "title": "Sqlite"
        }, 
        {
            "location": "/databases/google_data_store/", 
            "text": "Google_data_store\n\n\nThe place to learn about the Google Data Store is right along with Google App Engine in one of these books:\n\n\n\n\nProgramming Google App Engine with Python by Dan Sanderson\n\n\nProgramming Google App Engine with Java by Dan Sanderson\n\n\n\n\nHopefully \nDan\n will deliver \nProgramming Google App Engine with Go\n soon.  The Google Data Store is strange.  Its also the most powerful data persistence system available.  It has the interesting property that, to quote the book above: \n\"the performance of an index-backed query is not affected by the number of entities in the datastore\"\n.  That means that your query on 10billion records is just as fast as a query on 10 records.  Now you know why google is fast no matter how big the Internet gets. \n\n\nThese three App Engine apps use the Google Data Store for persistence:\n\n\nhttp://fixwdc.appspot.com/\n\n\nhttp://fixamfm.appspot.com/\n\n\nhttp://wisconsinherbarium.appspot.com/\n\n\n..and have the code available on github:\n\n\nhttps://github.com/botanyhelp/\n\n\nSee also the \nGoogle App Engine\n page.", 
            "title": "Google_data_store"
        }, 
        {
            "location": "/databases/google_data_store/#google_data_store", 
            "text": "The place to learn about the Google Data Store is right along with Google App Engine in one of these books:   Programming Google App Engine with Python by Dan Sanderson  Programming Google App Engine with Java by Dan Sanderson   Hopefully  Dan  will deliver  Programming Google App Engine with Go  soon.  The Google Data Store is strange.  Its also the most powerful data persistence system available.  It has the interesting property that, to quote the book above:  \"the performance of an index-backed query is not affected by the number of entities in the datastore\" .  That means that your query on 10billion records is just as fast as a query on 10 records.  Now you know why google is fast no matter how big the Internet gets.   These three App Engine apps use the Google Data Store for persistence:  http://fixwdc.appspot.com/  http://fixamfm.appspot.com/  http://wisconsinherbarium.appspot.com/  ..and have the code available on github:  https://github.com/botanyhelp/  See also the  Google App Engine  page.", 
            "title": "Google_data_store"
        }, 
        {
            "location": "/experience/experience/", 
            "text": "College and Experience\n\n\nEDUCATION:\u00a0\nB.S.\u00a0Chemical\u00a0Engineering,\u00a0Penn\u00a0State\u00a01996\n\n\nTotal transformation in 4.5 years.", 
            "title": "Experience"
        }, 
        {
            "location": "/experience/experience/#college-and-experience", 
            "text": "EDUCATION:\u00a0 B.S.\u00a0Chemical\u00a0Engineering,\u00a0Penn\u00a0State\u00a01996  Total transformation in 4.5 years.", 
            "title": "College and Experience"
        }, 
        {
            "location": "/experience/certificates/", 
            "text": "Certificates\n\n\nEnrolled in and completed these ten online courses during 2015 and 2016.  Super-Earths and Life was presented by \nDimitar Sasselov, Professor of Astronomy, Harvard University\n.  The other nine were presented by \nRafael Irizarry, Professor of Biostatistics, Harvard T.H. Chan School of Public Health\n.  These courses cover R programming, statistics and biology.\n\n\n\n\n\n\nPH525.1x: Statistics and R for the Life Sciences\n\n\n\n\n\n\nPH525.2x: Introduction to Linear Models and Matrix Algebra\n\n\n\n\n\n\nPH525.4x: Introduction to Bioconductor\n\n\n\n\n\n\nPH525.5x Case Study: RNA-seq data analysis\n\n\n\n\n\n\nPH525.6x Case Study: Variant Discovery and Genotyping\n\n\n\n\n\n\nPH525.7x Case Study: ChIP-seq data analysis\n\n\n\n\n\n\nPH525.8x Case study: DNA methylation data analysis\n\n\n\n\n\n\nPH525.1x: Data Analysis for Life Sciences 1: Statistics and R\n\n\n\n\n\n\nSPU30x: Super-Earths and Life\n\n\n\n\n\n\nPH525.2x: Data Analysis for Life Sciences 2: Introduction to Linear Models and Matrix Algebra\n\n\n\n\n\n\nI am speechless and on my knees with gratitude for these courses and the scientists and staff that created them.  The online \nedX Platform\n might be the best online training platform available.  The biostatistics courses are based on this book, available free:\n\n\nData Analysis for the Life Sciences, Rafael A Irizarry and Michael I Love\n\n\n..and also here on github:\n\n\ngithub.com/genomicsclass\n\n\nI completed 8 of these courses on time and with scores high enough to earn a certificate.  For two classes, ChIP-seq data analysis and DNA methylation data analysis, scores were too low to earn a certificate.  Links to certificates and detailed information of performance are shown below for all ten completed courses.  I am presently continuing to pursue knowledge and skills in these deep waters of statistics, biology, data analysis and R programming. \n\n\nPH525.1x: Statistics and R for the Life Sciences\n\n\n\n\nPH525.2x: Introduction to Linear Models and Matrix Algebra\n\n\n\n\nPH525.4x: Introduction to Bioconductor\n\n\n\n\nPH525.5x Case Study: RNA-seq data analysis\n\n\n\n\nPH525.6x Case Study: Variant Discovery and Genotyping\n\n\n\n\nPH525.7x Case Study: ChIP-seq data analysis\n\n\n\n\nSPU30x: Super-Earths and Life\n\n\n\n\nPH525.8x Case study: DNA methylation data analysis\n\n\n\n\nPH525.1x: Data Analysis for Life Sciences 1: Statistics and R\n\n\n\n\nPH525.2x: Data Analysis for Life Sciences 2: Introduction to Linear Models and Matrix Algebra\n\n\n\n\nHONOR CODE CERTIFICATE  Verify the authenticity of this certificate at \n\n\nPH525.1x: Statistics and R for the Life Sciences Certificate\n\n\nPH525.1x: Statistics and R for the Life Sciences Certificate\n\n\nHONOR CODE CERTIFICATE  Verify the authenticity of this certificate at \nIssued May 26, 2015\n\n\nPH525.2x: Introduction to Linear Models and Matrix Algebra Certificate\n\n\nPH525.2x: Introduction to Linear Models and Matrix Algebra Certificate\n\n\nHONOR CODE CERTIFICATE  Verify the authenticity of this certificate at \nIssued August 24, 2015\n\n\nPH525.4x: Introduction to Bioconductor Certificate\n\n\nPH525.4x: Introduction to Bioconductor Certificate\n\n\nPH525.1x: Data Analysis for Life Sciences 1: Statistics and R Certificate\n\n\nHONOR CODE CERTIFICATE\nIssued November 23, 2015\nVALID CERTIFICATE ID\n871ed33dde8c491d95d5f53fec8bb293\n\n\nSPU30x: Super-Earths and Life Certificate\n\n\nDimitar Sasselov\nProfessor of Astronomy\nHarvard University\nHONOR CODE CERTIFICATE\nIssued December 5, 2015\nVALID CERTIFICATE ID\nedec54cb74f545038bf8c5c7705b85b0\n\n\nPH525.2x: Data Analysis for Life Sciences 2: Introduction to Linear Models and Matrix Algebra Certificate\n\n\nHONOR CODE CERTIFICATE\nIssued February 16, 2016\nVALID CERTIFICATE ID\nc739bdb741594decbc1fff16e7cf31aa", 
            "title": "Certificates"
        }, 
        {
            "location": "/experience/certificates/#certificates", 
            "text": "Enrolled in and completed these ten online courses during 2015 and 2016.  Super-Earths and Life was presented by  Dimitar Sasselov, Professor of Astronomy, Harvard University .  The other nine were presented by  Rafael Irizarry, Professor of Biostatistics, Harvard T.H. Chan School of Public Health .  These courses cover R programming, statistics and biology.    PH525.1x: Statistics and R for the Life Sciences    PH525.2x: Introduction to Linear Models and Matrix Algebra    PH525.4x: Introduction to Bioconductor    PH525.5x Case Study: RNA-seq data analysis    PH525.6x Case Study: Variant Discovery and Genotyping    PH525.7x Case Study: ChIP-seq data analysis    PH525.8x Case study: DNA methylation data analysis    PH525.1x: Data Analysis for Life Sciences 1: Statistics and R    SPU30x: Super-Earths and Life    PH525.2x: Data Analysis for Life Sciences 2: Introduction to Linear Models and Matrix Algebra    I am speechless and on my knees with gratitude for these courses and the scientists and staff that created them.  The online  edX Platform  might be the best online training platform available.  The biostatistics courses are based on this book, available free:  Data Analysis for the Life Sciences, Rafael A Irizarry and Michael I Love  ..and also here on github:  github.com/genomicsclass  I completed 8 of these courses on time and with scores high enough to earn a certificate.  For two classes, ChIP-seq data analysis and DNA methylation data analysis, scores were too low to earn a certificate.  Links to certificates and detailed information of performance are shown below for all ten completed courses.  I am presently continuing to pursue knowledge and skills in these deep waters of statistics, biology, data analysis and R programming.   PH525.1x: Statistics and R for the Life Sciences   PH525.2x: Introduction to Linear Models and Matrix Algebra   PH525.4x: Introduction to Bioconductor   PH525.5x Case Study: RNA-seq data analysis   PH525.6x Case Study: Variant Discovery and Genotyping   PH525.7x Case Study: ChIP-seq data analysis   SPU30x: Super-Earths and Life   PH525.8x Case study: DNA methylation data analysis   PH525.1x: Data Analysis for Life Sciences 1: Statistics and R   PH525.2x: Data Analysis for Life Sciences 2: Introduction to Linear Models and Matrix Algebra   HONOR CODE CERTIFICATE  Verify the authenticity of this certificate at   PH525.1x: Statistics and R for the Life Sciences Certificate  PH525.1x: Statistics and R for the Life Sciences Certificate  HONOR CODE CERTIFICATE  Verify the authenticity of this certificate at \nIssued May 26, 2015  PH525.2x: Introduction to Linear Models and Matrix Algebra Certificate  PH525.2x: Introduction to Linear Models and Matrix Algebra Certificate  HONOR CODE CERTIFICATE  Verify the authenticity of this certificate at \nIssued August 24, 2015  PH525.4x: Introduction to Bioconductor Certificate  PH525.4x: Introduction to Bioconductor Certificate  PH525.1x: Data Analysis for Life Sciences 1: Statistics and R Certificate  HONOR CODE CERTIFICATE\nIssued November 23, 2015\nVALID CERTIFICATE ID\n871ed33dde8c491d95d5f53fec8bb293  SPU30x: Super-Earths and Life Certificate  Dimitar Sasselov\nProfessor of Astronomy\nHarvard University\nHONOR CODE CERTIFICATE\nIssued December 5, 2015\nVALID CERTIFICATE ID\nedec54cb74f545038bf8c5c7705b85b0  PH525.2x: Data Analysis for Life Sciences 2: Introduction to Linear Models and Matrix Algebra Certificate  HONOR CODE CERTIFICATE\nIssued February 16, 2016\nVALID CERTIFICATE ID\nc739bdb741594decbc1fff16e7cf31aa", 
            "title": "Certificates"
        }
    ]
}